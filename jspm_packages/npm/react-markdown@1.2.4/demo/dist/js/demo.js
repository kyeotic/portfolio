/* */ 
"format cjs";
(function(process) {
  !function(e, t) {
    if ("object" == typeof exports && "object" == typeof module)
      module.exports = t(require('react'), require('react-dom'));
    else if ("function" == typeof define && define.amd)
      define(["react", "react-dom"], t);
    else {
      var r = "object" == typeof exports ? t(require('react'), require('react-dom')) : t(e.React, e.ReactDOM);
      for (var n in r)
        ("object" == typeof exports ? exports : e)[n] = r[n];
    }
  }(this, function(e, t) {
    return function(e) {
      function t(n) {
        if (r[n])
          return r[n].exports;
        var i = r[n] = {
          exports: {},
          id: n,
          loaded: !1
        };
        return e[n].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
      }
      var r = {};
      return t.m = e, t.c = r, t.p = "/demo/dist", t(0);
    }([function(e, t, r) {
      e.exports = r(7);
    }, function(e, t, r) {
      "use strict";
      var n = r(25),
          i = r(24),
          a = 92,
          s = r(4).decodeHTML,
          o = "&(?:#x[a-f0-9]{1,8}|#[0-9]{1,8}|[a-z][a-z0-9]{1,31});",
          u = "[A-Za-z][A-Za-z0-9-]*",
          l = "[a-zA-Z_:][a-zA-Z0-9:._-]*",
          c = "[^\"'=<>`\\x00-\\x20]+",
          p = "'[^']*'",
          h = '"[^"]*"',
          d = "(?:" + c + "|" + p + "|" + h + ")",
          f = "(?:\\s*=\\s*" + d + ")",
          m = "(?:\\s+" + l + f + "?)",
          g = "<" + u + m + "*\\s*/?>",
          b = "</" + u + "\\s*[>]",
          v = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->",
          C = "[<][?].*?[?][>]",
          E = "<![A-Z]+\\s+[^>]*>",
          k = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
          A = "(?:" + g + "|" + b + "|" + v + "|" + C + "|" + E + "|" + k + ")",
          w = new RegExp("^" + A, "i"),
          y = /[\\&]/,
          x = "[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]",
          _ = new RegExp("\\\\" + x + "|" + o, "gi"),
          L = '[&<>"]',
          q = new RegExp(L, "g"),
          D = new RegExp(o + "|" + L, "gi"),
          T = function(e) {
            return e.charCodeAt(0) === a ? e.charAt(1) : s(e);
          },
          B = function(e) {
            return y.test(e) ? e.replace(_, T) : e;
          },
          N = function(e) {
            try {
              return n(i(e));
            } catch (t) {
              return e;
            }
          },
          S = function(e) {
            switch (e) {
              case "&":
                return "&amp;";
              case "<":
                return "&lt;";
              case ">":
                return "&gt;";
              case '"':
                return "&quot;";
              default:
                return e;
            }
          },
          F = function(e, t) {
            return q.test(e) ? t ? e.replace(D, S) : e.replace(q, S) : e;
          };
      e.exports = {
        unescapeString: B,
        normalizeURI: N,
        escapeXml: F,
        reHtmlTag: w,
        OPENTAG: g,
        CLOSETAG: b,
        ENTITY: o,
        ESCAPABLE: x
      };
    }, function(t, r) {
      t.exports = e;
    }, function(e, t) {
      "use strict";
      function r(e) {
        switch (e._type) {
          case "Document":
          case "BlockQuote":
          case "List":
          case "Item":
          case "Paragraph":
          case "Header":
          case "Emph":
          case "Strong":
          case "Link":
          case "Image":
            return !0;
          default:
            return !1;
        }
      }
      var n = function(e, t) {
        this.current = e, this.entering = t === !0;
      },
          i = function() {
            var e = this.current,
                t = this.entering;
            if (null === e)
              return null;
            var n = r(e);
            return t && n ? e._firstChild ? (this.current = e._firstChild, this.entering = !0) : this.entering = !1 : e === this.root ? this.current = null : null === e._next ? (this.current = e._parent, this.entering = !1) : (this.current = e._next, this.entering = !0), {
              entering: t,
              node: e
            };
          },
          a = function(e) {
            return {
              current: e,
              root: e,
              entering: !0,
              next: i,
              resumeAt: n
            };
          },
          s = function(e, t) {
            this._type = e, this._parent = null, this._firstChild = null, this._lastChild = null, this._prev = null, this._next = null, this._sourcepos = t, this._lastLineBlank = !1, this._open = !0, this._string_content = null, this._literal = null, this._listData = null, this._info = null, this._destination = null, this._title = null, this._isFenced = !1, this._fenceChar = null, this._fenceLength = 0, this._fenceOffset = null, this._level = null;
          },
          o = s.prototype;
      Object.defineProperty(o, "isContainer", {get: function() {
          return r(this);
        }}), Object.defineProperty(o, "type", {get: function() {
          return this._type;
        }}), Object.defineProperty(o, "firstChild", {get: function() {
          return this._firstChild;
        }}), Object.defineProperty(o, "lastChild", {get: function() {
          return this._lastChild;
        }}), Object.defineProperty(o, "next", {get: function() {
          return this._next;
        }}), Object.defineProperty(o, "prev", {get: function() {
          return this._prev;
        }}), Object.defineProperty(o, "parent", {get: function() {
          return this._parent;
        }}), Object.defineProperty(o, "sourcepos", {get: function() {
          return this._sourcepos;
        }}), Object.defineProperty(o, "literal", {
        get: function() {
          return this._literal;
        },
        set: function(e) {
          this._literal = e;
        }
      }), Object.defineProperty(o, "destination", {
        get: function() {
          return this._destination;
        },
        set: function(e) {
          this._destination = e;
        }
      }), Object.defineProperty(o, "title", {
        get: function() {
          return this._title;
        },
        set: function(e) {
          this._title = e;
        }
      }), Object.defineProperty(o, "info", {
        get: function() {
          return this._info;
        },
        set: function(e) {
          this._info = e;
        }
      }), Object.defineProperty(o, "level", {
        get: function() {
          return this._level;
        },
        set: function(e) {
          this._level = e;
        }
      }), Object.defineProperty(o, "listType", {
        get: function() {
          return this._listData.type;
        },
        set: function(e) {
          this._listData.type = e;
        }
      }), Object.defineProperty(o, "listTight", {
        get: function() {
          return this._listData.tight;
        },
        set: function(e) {
          this._listData.tight = e;
        }
      }), Object.defineProperty(o, "listStart", {
        get: function() {
          return this._listData.start;
        },
        set: function(e) {
          this._listData.start = e;
        }
      }), Object.defineProperty(o, "listDelimiter", {
        get: function() {
          return this._listData.delimiter;
        },
        set: function(e) {
          this._listData.delimiter = e;
        }
      }), s.prototype.appendChild = function(e) {
        e.unlink(), e._parent = this, this._lastChild ? (this._lastChild._next = e, e._prev = this._lastChild, this._lastChild = e) : (this._firstChild = e, this._lastChild = e);
      }, s.prototype.prependChild = function(e) {
        e.unlink(), e._parent = this, this._firstChild ? (this._firstChild._prev = e, e._next = this._firstChild, this._firstChild = e) : (this._firstChild = e, this._lastChild = e);
      }, s.prototype.unlink = function() {
        this._prev ? this._prev._next = this._next : this._parent && (this._parent._firstChild = this._next), this._next ? this._next._prev = this._prev : this._parent && (this._parent._lastChild = this._prev), this._parent = null, this._next = null, this._prev = null;
      }, s.prototype.insertAfter = function(e) {
        e.unlink(), e._next = this._next, e._next && (e._next._prev = e), e._prev = this, this._next = e, e._parent = this._parent, e._next || (e._parent._lastChild = e);
      }, s.prototype.insertBefore = function(e) {
        e.unlink(), e._prev = this._prev, e._prev && (e._prev._next = e), e._next = this, this._prev = e, e._parent = this._parent, e._prev || (e._parent._firstChild = e);
      }, s.prototype.walker = function() {
        var e = new a(this);
        return e;
      }, e.exports = s;
    }, function(e, t, r) {
      var n = r(21),
          i = r(19);
      t.decode = function(e, t) {
        return (!t || 0 >= t ? i.XML : i.HTML)(e);
      }, t.decodeStrict = function(e, t) {
        return (!t || 0 >= t ? i.XML : i.HTMLStrict)(e);
      }, t.encode = function(e, t) {
        return (!t || 0 >= t ? n.XML : n.HTML)(e);
      }, t.encodeXML = n.XML, t.encodeHTML4 = t.encodeHTML5 = t.encodeHTML = n.HTML, t.decodeXML = t.decodeXMLStrict = i.XML, t.decodeHTML4 = t.decodeHTML5 = t.decodeHTML = i.HTML, t.decodeHTML4Strict = t.decodeHTML5Strict = t.decodeHTMLStrict = i.HTMLStrict, t.escape = n.escape;
    }, function(e, t) {
      e.exports = {
        Aacute: "√Å",
        aacute: "√°",
        Abreve: "ƒÇ",
        abreve: "ƒÉ",
        ac: "‚àæ",
        acd: "‚àø",
        acE: "‚àæÃ≥",
        Acirc: "√Ç",
        acirc: "√¢",
        acute: "¬¥",
        Acy: "–ê",
        acy: "–∞",
        AElig: "√Ü",
        aelig: "√¶",
        af: "‚Å°",
        Afr: "ùîÑ",
        afr: "ùîû",
        Agrave: "√Ä",
        agrave: "√†",
        alefsym: "‚Ñµ",
        aleph: "‚Ñµ",
        Alpha: "Œë",
        alpha: "Œ±",
        Amacr: "ƒÄ",
        amacr: "ƒÅ",
        amalg: "‚®ø",
        amp: "&",
        AMP: "&",
        andand: "‚©ï",
        And: "‚©ì",
        and: "‚àß",
        andd: "‚©ú",
        andslope: "‚©ò",
        andv: "‚©ö",
        ang: "‚à†",
        ange: "‚¶§",
        angle: "‚à†",
        angmsdaa: "‚¶®",
        angmsdab: "‚¶©",
        angmsdac: "‚¶™",
        angmsdad: "‚¶´",
        angmsdae: "‚¶¨",
        angmsdaf: "‚¶≠",
        angmsdag: "‚¶Æ",
        angmsdah: "‚¶Ø",
        angmsd: "‚à°",
        angrt: "‚àü",
        angrtvb: "‚äæ",
        angrtvbd: "‚¶ù",
        angsph: "‚à¢",
        angst: "√Ö",
        angzarr: "‚çº",
        Aogon: "ƒÑ",
        aogon: "ƒÖ",
        Aopf: "ùî∏",
        aopf: "ùïí",
        apacir: "‚©Ø",
        ap: "‚âà",
        apE: "‚©∞",
        ape: "‚âä",
        apid: "‚âã",
        apos: "'",
        ApplyFunction: "‚Å°",
        approx: "‚âà",
        approxeq: "‚âä",
        Aring: "√Ö",
        aring: "√•",
        Ascr: "ùíú",
        ascr: "ùí∂",
        Assign: "‚âî",
        ast: "*",
        asymp: "‚âà",
        asympeq: "‚âç",
        Atilde: "√É",
        atilde: "√£",
        Auml: "√Ñ",
        auml: "√§",
        awconint: "‚à≥",
        awint: "‚®ë",
        backcong: "‚âå",
        backepsilon: "œ∂",
        backprime: "‚Äµ",
        backsim: "‚àΩ",
        backsimeq: "‚ãç",
        Backslash: "‚àñ",
        Barv: "‚´ß",
        barvee: "‚äΩ",
        barwed: "‚åÖ",
        Barwed: "‚åÜ",
        barwedge: "‚åÖ",
        bbrk: "‚éµ",
        bbrktbrk: "‚é∂",
        bcong: "‚âå",
        Bcy: "–ë",
        bcy: "–±",
        bdquo: "‚Äû",
        becaus: "‚àµ",
        because: "‚àµ",
        Because: "‚àµ",
        bemptyv: "‚¶∞",
        bepsi: "œ∂",
        bernou: "‚Ñ¨",
        Bernoullis: "‚Ñ¨",
        Beta: "Œí",
        beta: "Œ≤",
        beth: "‚Ñ∂",
        between: "‚â¨",
        Bfr: "ùîÖ",
        bfr: "ùîü",
        bigcap: "‚ãÇ",
        bigcirc: "‚óØ",
        bigcup: "‚ãÉ",
        bigodot: "‚®Ä",
        bigoplus: "‚®Å",
        bigotimes: "‚®Ç",
        bigsqcup: "‚®Ü",
        bigstar: "‚òÖ",
        bigtriangledown: "‚ñΩ",
        bigtriangleup: "‚ñ≥",
        biguplus: "‚®Ñ",
        bigvee: "‚ãÅ",
        bigwedge: "‚ãÄ",
        bkarow: "‚§ç",
        blacklozenge: "‚ß´",
        blacksquare: "‚ñ™",
        blacktriangle: "‚ñ¥",
        blacktriangledown: "‚ñæ",
        blacktriangleleft: "‚óÇ",
        blacktriangleright: "‚ñ∏",
        blank: "‚ê£",
        blk12: "‚ñí",
        blk14: "‚ñë",
        blk34: "‚ñì",
        block: "‚ñà",
        bne: "=‚É•",
        bnequiv: "‚â°‚É•",
        bNot: "‚´≠",
        bnot: "‚åê",
        Bopf: "ùîπ",
        bopf: "ùïì",
        bot: "‚ä•",
        bottom: "‚ä•",
        bowtie: "‚ãà",
        boxbox: "‚ßâ",
        boxdl: "‚îê",
        boxdL: "‚ïï",
        boxDl: "‚ïñ",
        boxDL: "‚ïó",
        boxdr: "‚îå",
        boxdR: "‚ïí",
        boxDr: "‚ïì",
        boxDR: "‚ïî",
        boxh: "‚îÄ",
        boxH: "‚ïê",
        boxhd: "‚î¨",
        boxHd: "‚ï§",
        boxhD: "‚ï•",
        boxHD: "‚ï¶",
        boxhu: "‚î¥",
        boxHu: "‚ïß",
        boxhU: "‚ï®",
        boxHU: "‚ï©",
        boxminus: "‚äü",
        boxplus: "‚äû",
        boxtimes: "‚ä†",
        boxul: "‚îò",
        boxuL: "‚ïõ",
        boxUl: "‚ïú",
        boxUL: "‚ïù",
        boxur: "‚îî",
        boxuR: "‚ïò",
        boxUr: "‚ïô",
        boxUR: "‚ïö",
        boxv: "‚îÇ",
        boxV: "‚ïë",
        boxvh: "‚îº",
        boxvH: "‚ï™",
        boxVh: "‚ï´",
        boxVH: "‚ï¨",
        boxvl: "‚î§",
        boxvL: "‚ï°",
        boxVl: "‚ï¢",
        boxVL: "‚ï£",
        boxvr: "‚îú",
        boxvR: "‚ïû",
        boxVr: "‚ïü",
        boxVR: "‚ï†",
        bprime: "‚Äµ",
        breve: "Àò",
        Breve: "Àò",
        brvbar: "¬¶",
        bscr: "ùí∑",
        Bscr: "‚Ñ¨",
        bsemi: "‚Åè",
        bsim: "‚àΩ",
        bsime: "‚ãç",
        bsolb: "‚ßÖ",
        bsol: "\\",
        bsolhsub: "‚üà",
        bull: "‚Ä¢",
        bullet: "‚Ä¢",
        bump: "‚âé",
        bumpE: "‚™Æ",
        bumpe: "‚âè",
        Bumpeq: "‚âé",
        bumpeq: "‚âè",
        Cacute: "ƒÜ",
        cacute: "ƒá",
        capand: "‚©Ñ",
        capbrcup: "‚©â",
        capcap: "‚©ã",
        cap: "‚à©",
        Cap: "‚ãí",
        capcup: "‚©á",
        capdot: "‚©Ä",
        CapitalDifferentialD: "‚ÖÖ",
        caps: "‚à©Ô∏Ä",
        caret: "‚ÅÅ",
        caron: "Àá",
        Cayleys: "‚Ñ≠",
        ccaps: "‚©ç",
        Ccaron: "ƒå",
        ccaron: "ƒç",
        Ccedil: "√á",
        ccedil: "√ß",
        Ccirc: "ƒà",
        ccirc: "ƒâ",
        Cconint: "‚à∞",
        ccups: "‚©å",
        ccupssm: "‚©ê",
        Cdot: "ƒä",
        cdot: "ƒã",
        cedil: "¬∏",
        Cedilla: "¬∏",
        cemptyv: "‚¶≤",
        cent: "¬¢",
        centerdot: "¬∑",
        CenterDot: "¬∑",
        cfr: "ùî†",
        Cfr: "‚Ñ≠",
        CHcy: "–ß",
        chcy: "—á",
        check: "‚úì",
        checkmark: "‚úì",
        Chi: "Œß",
        chi: "œá",
        circ: "ÀÜ",
        circeq: "‚âó",
        circlearrowleft: "‚Ü∫",
        circlearrowright: "‚Üª",
        circledast: "‚äõ",
        circledcirc: "‚äö",
        circleddash: "‚äù",
        CircleDot: "‚äô",
        circledR: "¬Æ",
        circledS: "‚ìà",
        CircleMinus: "‚äñ",
        CirclePlus: "‚äï",
        CircleTimes: "‚äó",
        cir: "‚óã",
        cirE: "‚ßÉ",
        cire: "‚âó",
        cirfnint: "‚®ê",
        cirmid: "‚´Ø",
        cirscir: "‚ßÇ",
        ClockwiseContourIntegral: "‚à≤",
        CloseCurlyDoubleQuote: "‚Äù",
        CloseCurlyQuote: "‚Äô",
        clubs: "‚ô£",
        clubsuit: "‚ô£",
        colon: ":",
        Colon: "‚à∑",
        Colone: "‚©¥",
        colone: "‚âî",
        coloneq: "‚âî",
        comma: ",",
        commat: "@",
        comp: "‚àÅ",
        compfn: "‚àò",
        complement: "‚àÅ",
        complexes: "‚ÑÇ",
        cong: "‚âÖ",
        congdot: "‚©≠",
        Congruent: "‚â°",
        conint: "‚àÆ",
        Conint: "‚àØ",
        ContourIntegral: "‚àÆ",
        copf: "ùïî",
        Copf: "‚ÑÇ",
        coprod: "‚àê",
        Coproduct: "‚àê",
        copy: "¬©",
        COPY: "¬©",
        copysr: "‚Ñó",
        CounterClockwiseContourIntegral: "‚à≥",
        crarr: "‚Üµ",
        cross: "‚úó",
        Cross: "‚®Ø",
        Cscr: "ùíû",
        cscr: "ùí∏",
        csub: "‚´è",
        csube: "‚´ë",
        csup: "‚´ê",
        csupe: "‚´í",
        ctdot: "‚ãØ",
        cudarrl: "‚§∏",
        cudarrr: "‚§µ",
        cuepr: "‚ãû",
        cuesc: "‚ãü",
        cularr: "‚Ü∂",
        cularrp: "‚§Ω",
        cupbrcap: "‚©à",
        cupcap: "‚©Ü",
        CupCap: "‚âç",
        cup: "‚à™",
        Cup: "‚ãì",
        cupcup: "‚©ä",
        cupdot: "‚äç",
        cupor: "‚©Ö",
        cups: "‚à™Ô∏Ä",
        curarr: "‚Ü∑",
        curarrm: "‚§º",
        curlyeqprec: "‚ãû",
        curlyeqsucc: "‚ãü",
        curlyvee: "‚ãé",
        curlywedge: "‚ãè",
        curren: "¬§",
        curvearrowleft: "‚Ü∂",
        curvearrowright: "‚Ü∑",
        cuvee: "‚ãé",
        cuwed: "‚ãè",
        cwconint: "‚à≤",
        cwint: "‚à±",
        cylcty: "‚å≠",
        dagger: "‚Ä†",
        Dagger: "‚Ä°",
        daleth: "‚Ñ∏",
        darr: "‚Üì",
        Darr: "‚Ü°",
        dArr: "‚áì",
        dash: "‚Äê",
        Dashv: "‚´§",
        dashv: "‚ä£",
        dbkarow: "‚§è",
        dblac: "Àù",
        Dcaron: "ƒé",
        dcaron: "ƒè",
        Dcy: "–î",
        dcy: "–¥",
        ddagger: "‚Ä°",
        ddarr: "‚áä",
        DD: "‚ÖÖ",
        dd: "‚ÖÜ",
        DDotrahd: "‚§ë",
        ddotseq: "‚©∑",
        deg: "¬∞",
        Del: "‚àá",
        Delta: "Œî",
        delta: "Œ¥",
        demptyv: "‚¶±",
        dfisht: "‚•ø",
        Dfr: "ùîá",
        dfr: "ùî°",
        dHar: "‚••",
        dharl: "‚áÉ",
        dharr: "‚áÇ",
        DiacriticalAcute: "¬¥",
        DiacriticalDot: "Àô",
        DiacriticalDoubleAcute: "Àù",
        DiacriticalGrave: "`",
        DiacriticalTilde: "Àú",
        diam: "‚ãÑ",
        diamond: "‚ãÑ",
        Diamond: "‚ãÑ",
        diamondsuit: "‚ô¶",
        diams: "‚ô¶",
        die: "¬®",
        DifferentialD: "‚ÖÜ",
        digamma: "œù",
        disin: "‚ã≤",
        div: "√∑",
        divide: "√∑",
        divideontimes: "‚ãá",
        divonx: "‚ãá",
        DJcy: "–Ç",
        djcy: "—í",
        dlcorn: "‚åû",
        dlcrop: "‚åç",
        dollar: "$",
        Dopf: "ùîª",
        dopf: "ùïï",
        Dot: "¬®",
        dot: "Àô",
        DotDot: "‚Éú",
        doteq: "‚âê",
        doteqdot: "‚âë",
        DotEqual: "‚âê",
        dotminus: "‚à∏",
        dotplus: "‚àî",
        dotsquare: "‚ä°",
        doublebarwedge: "‚åÜ",
        DoubleContourIntegral: "‚àØ",
        DoubleDot: "¬®",
        DoubleDownArrow: "‚áì",
        DoubleLeftArrow: "‚áê",
        DoubleLeftRightArrow: "‚áî",
        DoubleLeftTee: "‚´§",
        DoubleLongLeftArrow: "‚ü∏",
        DoubleLongLeftRightArrow: "‚ü∫",
        DoubleLongRightArrow: "‚üπ",
        DoubleRightArrow: "‚áí",
        DoubleRightTee: "‚ä®",
        DoubleUpArrow: "‚áë",
        DoubleUpDownArrow: "‚áï",
        DoubleVerticalBar: "‚à•",
        DownArrowBar: "‚§ì",
        downarrow: "‚Üì",
        DownArrow: "‚Üì",
        Downarrow: "‚áì",
        DownArrowUpArrow: "‚áµ",
        DownBreve: "Ãë",
        downdownarrows: "‚áä",
        downharpoonleft: "‚áÉ",
        downharpoonright: "‚áÇ",
        DownLeftRightVector: "‚•ê",
        DownLeftTeeVector: "‚•û",
        DownLeftVectorBar: "‚•ñ",
        DownLeftVector: "‚ÜΩ",
        DownRightTeeVector: "‚•ü",
        DownRightVectorBar: "‚•ó",
        DownRightVector: "‚áÅ",
        DownTeeArrow: "‚Üß",
        DownTee: "‚ä§",
        drbkarow: "‚§ê",
        drcorn: "‚åü",
        drcrop: "‚åå",
        Dscr: "ùíü",
        dscr: "ùíπ",
        DScy: "–Ö",
        dscy: "—ï",
        dsol: "‚ß∂",
        Dstrok: "ƒê",
        dstrok: "ƒë",
        dtdot: "‚ã±",
        dtri: "‚ñø",
        dtrif: "‚ñæ",
        duarr: "‚áµ",
        duhar: "‚•Ø",
        dwangle: "‚¶¶",
        DZcy: "–è",
        dzcy: "—ü",
        dzigrarr: "‚üø",
        Eacute: "√â",
        eacute: "√©",
        easter: "‚©Æ",
        Ecaron: "ƒö",
        ecaron: "ƒõ",
        Ecirc: "√ä",
        ecirc: "√™",
        ecir: "‚âñ",
        ecolon: "‚âï",
        Ecy: "–≠",
        ecy: "—ç",
        eDDot: "‚©∑",
        Edot: "ƒñ",
        edot: "ƒó",
        eDot: "‚âë",
        ee: "‚Öá",
        efDot: "‚âí",
        Efr: "ùîà",
        efr: "ùî¢",
        eg: "‚™ö",
        Egrave: "√à",
        egrave: "√®",
        egs: "‚™ñ",
        egsdot: "‚™ò",
        el: "‚™ô",
        Element: "‚àà",
        elinters: "‚èß",
        ell: "‚Ñì",
        els: "‚™ï",
        elsdot: "‚™ó",
        Emacr: "ƒí",
        emacr: "ƒì",
        empty: "‚àÖ",
        emptyset: "‚àÖ",
        EmptySmallSquare: "‚óª",
        emptyv: "‚àÖ",
        EmptyVerySmallSquare: "‚ñ´",
        emsp13: "‚ÄÑ",
        emsp14: "‚ÄÖ",
        emsp: "‚ÄÉ",
        ENG: "≈ä",
        eng: "≈ã",
        ensp: "‚ÄÇ",
        Eogon: "ƒò",
        eogon: "ƒô",
        Eopf: "ùîº",
        eopf: "ùïñ",
        epar: "‚ãï",
        eparsl: "‚ß£",
        eplus: "‚©±",
        epsi: "Œµ",
        Epsilon: "Œï",
        epsilon: "Œµ",
        epsiv: "œµ",
        eqcirc: "‚âñ",
        eqcolon: "‚âï",
        eqsim: "‚âÇ",
        eqslantgtr: "‚™ñ",
        eqslantless: "‚™ï",
        Equal: "‚©µ",
        equals: "=",
        EqualTilde: "‚âÇ",
        equest: "‚âü",
        Equilibrium: "‚áå",
        equiv: "‚â°",
        equivDD: "‚©∏",
        eqvparsl: "‚ß•",
        erarr: "‚•±",
        erDot: "‚âì",
        escr: "‚ÑØ",
        Escr: "‚Ñ∞",
        esdot: "‚âê",
        Esim: "‚©≥",
        esim: "‚âÇ",
        Eta: "Œó",
        eta: "Œ∑",
        ETH: "√ê",
        eth: "√∞",
        Euml: "√ã",
        euml: "√´",
        euro: "‚Ç¨",
        excl: "!",
        exist: "‚àÉ",
        Exists: "‚àÉ",
        expectation: "‚Ñ∞",
        exponentiale: "‚Öá",
        ExponentialE: "‚Öá",
        fallingdotseq: "‚âí",
        Fcy: "–§",
        fcy: "—Ñ",
        female: "‚ôÄ",
        ffilig: "Ô¨É",
        fflig: "Ô¨Ä",
        ffllig: "Ô¨Ñ",
        Ffr: "ùîâ",
        ffr: "ùî£",
        filig: "Ô¨Å",
        FilledSmallSquare: "‚óº",
        FilledVerySmallSquare: "‚ñ™",
        fjlig: "fj",
        flat: "‚ô≠",
        fllig: "Ô¨Ç",
        fltns: "‚ñ±",
        fnof: "∆í",
        Fopf: "ùîΩ",
        fopf: "ùïó",
        forall: "‚àÄ",
        ForAll: "‚àÄ",
        fork: "‚ãî",
        forkv: "‚´ô",
        Fouriertrf: "‚Ñ±",
        fpartint: "‚®ç",
        frac12: "¬Ω",
        frac13: "‚Öì",
        frac14: "¬º",
        frac15: "‚Öï",
        frac16: "‚Öô",
        frac18: "‚Öõ",
        frac23: "‚Öî",
        frac25: "‚Öñ",
        frac34: "¬æ",
        frac35: "‚Öó",
        frac38: "‚Öú",
        frac45: "‚Öò",
        frac56: "‚Öö",
        frac58: "‚Öù",
        frac78: "‚Öû",
        frasl: "‚ÅÑ",
        frown: "‚å¢",
        fscr: "ùíª",
        Fscr: "‚Ñ±",
        gacute: "«µ",
        Gamma: "Œì",
        gamma: "Œ≥",
        Gammad: "œú",
        gammad: "œù",
        gap: "‚™Ü",
        Gbreve: "ƒû",
        gbreve: "ƒü",
        Gcedil: "ƒ¢",
        Gcirc: "ƒú",
        gcirc: "ƒù",
        Gcy: "–ì",
        gcy: "–≥",
        Gdot: "ƒ†",
        gdot: "ƒ°",
        ge: "‚â•",
        gE: "‚âß",
        gEl: "‚™å",
        gel: "‚ãõ",
        geq: "‚â•",
        geqq: "‚âß",
        geqslant: "‚©æ",
        gescc: "‚™©",
        ges: "‚©æ",
        gesdot: "‚™Ä",
        gesdoto: "‚™Ç",
        gesdotol: "‚™Ñ",
        gesl: "‚ãõÔ∏Ä",
        gesles: "‚™î",
        Gfr: "ùîä",
        gfr: "ùî§",
        gg: "‚â´",
        Gg: "‚ãô",
        ggg: "‚ãô",
        gimel: "‚Ñ∑",
        GJcy: "–É",
        gjcy: "—ì",
        gla: "‚™•",
        gl: "‚â∑",
        glE: "‚™í",
        glj: "‚™§",
        gnap: "‚™ä",
        gnapprox: "‚™ä",
        gne: "‚™à",
        gnE: "‚â©",
        gneq: "‚™à",
        gneqq: "‚â©",
        gnsim: "‚ãß",
        Gopf: "ùîæ",
        gopf: "ùïò",
        grave: "`",
        GreaterEqual: "‚â•",
        GreaterEqualLess: "‚ãõ",
        GreaterFullEqual: "‚âß",
        GreaterGreater: "‚™¢",
        GreaterLess: "‚â∑",
        GreaterSlantEqual: "‚©æ",
        GreaterTilde: "‚â≥",
        Gscr: "ùí¢",
        gscr: "‚Ñä",
        gsim: "‚â≥",
        gsime: "‚™é",
        gsiml: "‚™ê",
        gtcc: "‚™ß",
        gtcir: "‚©∫",
        gt: ">",
        GT: ">",
        Gt: "‚â´",
        gtdot: "‚ãó",
        gtlPar: "‚¶ï",
        gtquest: "‚©º",
        gtrapprox: "‚™Ü",
        gtrarr: "‚•∏",
        gtrdot: "‚ãó",
        gtreqless: "‚ãõ",
        gtreqqless: "‚™å",
        gtrless: "‚â∑",
        gtrsim: "‚â≥",
        gvertneqq: "‚â©Ô∏Ä",
        gvnE: "‚â©Ô∏Ä",
        Hacek: "Àá",
        hairsp: "‚Ää",
        half: "¬Ω",
        hamilt: "‚Ñã",
        HARDcy: "–™",
        hardcy: "—ä",
        harrcir: "‚•à",
        harr: "‚Üî",
        hArr: "‚áî",
        harrw: "‚Ü≠",
        Hat: "^",
        hbar: "‚Ñè",
        Hcirc: "ƒ§",
        hcirc: "ƒ•",
        hearts: "‚ô•",
        heartsuit: "‚ô•",
        hellip: "‚Ä¶",
        hercon: "‚äπ",
        hfr: "ùî•",
        Hfr: "‚Ñå",
        HilbertSpace: "‚Ñã",
        hksearow: "‚§•",
        hkswarow: "‚§¶",
        hoarr: "‚áø",
        homtht: "‚àª",
        hookleftarrow: "‚Ü©",
        hookrightarrow: "‚Ü™",
        hopf: "ùïô",
        Hopf: "‚Ñç",
        horbar: "‚Äï",
        HorizontalLine: "‚îÄ",
        hscr: "ùíΩ",
        Hscr: "‚Ñã",
        hslash: "‚Ñè",
        Hstrok: "ƒ¶",
        hstrok: "ƒß",
        HumpDownHump: "‚âé",
        HumpEqual: "‚âè",
        hybull: "‚ÅÉ",
        hyphen: "‚Äê",
        Iacute: "√ç",
        iacute: "√≠",
        ic: "‚Å£",
        Icirc: "√é",
        icirc: "√Æ",
        Icy: "–ò",
        icy: "–∏",
        Idot: "ƒ∞",
        IEcy: "–ï",
        iecy: "–µ",
        iexcl: "¬°",
        iff: "‚áî",
        ifr: "ùî¶",
        Ifr: "‚Ñë",
        Igrave: "√å",
        igrave: "√¨",
        ii: "‚Öà",
        iiiint: "‚®å",
        iiint: "‚à≠",
        iinfin: "‚ßú",
        iiota: "‚Ñ©",
        IJlig: "ƒ≤",
        ijlig: "ƒ≥",
        Imacr: "ƒ™",
        imacr: "ƒ´",
        image: "‚Ñë",
        ImaginaryI: "‚Öà",
        imagline: "‚Ñê",
        imagpart: "‚Ñë",
        imath: "ƒ±",
        Im: "‚Ñë",
        imof: "‚ä∑",
        imped: "∆µ",
        Implies: "‚áí",
        incare: "‚ÑÖ",
        "in": "‚àà",
        infin: "‚àû",
        infintie: "‚ßù",
        inodot: "ƒ±",
        intcal: "‚ä∫",
        "int": "‚à´",
        Int: "‚à¨",
        integers: "‚Ñ§",
        Integral: "‚à´",
        intercal: "‚ä∫",
        Intersection: "‚ãÇ",
        intlarhk: "‚®ó",
        intprod: "‚®º",
        InvisibleComma: "‚Å£",
        InvisibleTimes: "‚Å¢",
        IOcy: "–Å",
        iocy: "—ë",
        Iogon: "ƒÆ",
        iogon: "ƒØ",
        Iopf: "ùïÄ",
        iopf: "ùïö",
        Iota: "Œô",
        iota: "Œπ",
        iprod: "‚®º",
        iquest: "¬ø",
        iscr: "ùíæ",
        Iscr: "‚Ñê",
        isin: "‚àà",
        isindot: "‚ãµ",
        isinE: "‚ãπ",
        isins: "‚ã¥",
        isinsv: "‚ã≥",
        isinv: "‚àà",
        it: "‚Å¢",
        Itilde: "ƒ®",
        itilde: "ƒ©",
        Iukcy: "–Ü",
        iukcy: "—ñ",
        Iuml: "√è",
        iuml: "√Ø",
        Jcirc: "ƒ¥",
        jcirc: "ƒµ",
        Jcy: "–ô",
        jcy: "–π",
        Jfr: "ùîç",
        jfr: "ùîß",
        jmath: "»∑",
        Jopf: "ùïÅ",
        jopf: "ùïõ",
        Jscr: "ùí•",
        jscr: "ùíø",
        Jsercy: "–à",
        jsercy: "—ò",
        Jukcy: "–Ñ",
        jukcy: "—î",
        Kappa: "Œö",
        kappa: "Œ∫",
        kappav: "œ∞",
        Kcedil: "ƒ∂",
        kcedil: "ƒ∑",
        Kcy: "–ö",
        kcy: "–∫",
        Kfr: "ùîé",
        kfr: "ùî®",
        kgreen: "ƒ∏",
        KHcy: "–•",
        khcy: "—Ö",
        KJcy: "–å",
        kjcy: "—ú",
        Kopf: "ùïÇ",
        kopf: "ùïú",
        Kscr: "ùí¶",
        kscr: "ùìÄ",
        lAarr: "‚áö",
        Lacute: "ƒπ",
        lacute: "ƒ∫",
        laemptyv: "‚¶¥",
        lagran: "‚Ñí",
        Lambda: "Œõ",
        lambda: "Œª",
        lang: "‚ü®",
        Lang: "‚ü™",
        langd: "‚¶ë",
        langle: "‚ü®",
        lap: "‚™Ö",
        Laplacetrf: "‚Ñí",
        laquo: "¬´",
        larrb: "‚á§",
        larrbfs: "‚§ü",
        larr: "‚Üê",
        Larr: "‚Üû",
        lArr: "‚áê",
        larrfs: "‚§ù",
        larrhk: "‚Ü©",
        larrlp: "‚Ü´",
        larrpl: "‚§π",
        larrsim: "‚•≥",
        larrtl: "‚Ü¢",
        latail: "‚§ô",
        lAtail: "‚§õ",
        lat: "‚™´",
        late: "‚™≠",
        lates: "‚™≠Ô∏Ä",
        lbarr: "‚§å",
        lBarr: "‚§é",
        lbbrk: "‚ù≤",
        lbrace: "{",
        lbrack: "[",
        lbrke: "‚¶ã",
        lbrksld: "‚¶è",
        lbrkslu: "‚¶ç",
        Lcaron: "ƒΩ",
        lcaron: "ƒæ",
        Lcedil: "ƒª",
        lcedil: "ƒº",
        lceil: "‚åà",
        lcub: "{",
        Lcy: "–õ",
        lcy: "–ª",
        ldca: "‚§∂",
        ldquo: "‚Äú",
        ldquor: "‚Äû",
        ldrdhar: "‚•ß",
        ldrushar: "‚•ã",
        ldsh: "‚Ü≤",
        le: "‚â§",
        lE: "‚â¶",
        LeftAngleBracket: "‚ü®",
        LeftArrowBar: "‚á§",
        leftarrow: "‚Üê",
        LeftArrow: "‚Üê",
        Leftarrow: "‚áê",
        LeftArrowRightArrow: "‚áÜ",
        leftarrowtail: "‚Ü¢",
        LeftCeiling: "‚åà",
        LeftDoubleBracket: "‚ü¶",
        LeftDownTeeVector: "‚•°",
        LeftDownVectorBar: "‚•ô",
        LeftDownVector: "‚áÉ",
        LeftFloor: "‚åä",
        leftharpoondown: "‚ÜΩ",
        leftharpoonup: "‚Üº",
        leftleftarrows: "‚áá",
        leftrightarrow: "‚Üî",
        LeftRightArrow: "‚Üî",
        Leftrightarrow: "‚áî",
        leftrightarrows: "‚áÜ",
        leftrightharpoons: "‚áã",
        leftrightsquigarrow: "‚Ü≠",
        LeftRightVector: "‚•é",
        LeftTeeArrow: "‚Ü§",
        LeftTee: "‚ä£",
        LeftTeeVector: "‚•ö",
        leftthreetimes: "‚ãã",
        LeftTriangleBar: "‚ßè",
        LeftTriangle: "‚ä≤",
        LeftTriangleEqual: "‚ä¥",
        LeftUpDownVector: "‚•ë",
        LeftUpTeeVector: "‚•†",
        LeftUpVectorBar: "‚•ò",
        LeftUpVector: "‚Üø",
        LeftVectorBar: "‚•í",
        LeftVector: "‚Üº",
        lEg: "‚™ã",
        leg: "‚ãö",
        leq: "‚â§",
        leqq: "‚â¶",
        leqslant: "‚©Ω",
        lescc: "‚™®",
        les: "‚©Ω",
        lesdot: "‚©ø",
        lesdoto: "‚™Å",
        lesdotor: "‚™É",
        lesg: "‚ãöÔ∏Ä",
        lesges: "‚™ì",
        lessapprox: "‚™Ö",
        lessdot: "‚ãñ",
        lesseqgtr: "‚ãö",
        lesseqqgtr: "‚™ã",
        LessEqualGreater: "‚ãö",
        LessFullEqual: "‚â¶",
        LessGreater: "‚â∂",
        lessgtr: "‚â∂",
        LessLess: "‚™°",
        lesssim: "‚â≤",
        LessSlantEqual: "‚©Ω",
        LessTilde: "‚â≤",
        lfisht: "‚•º",
        lfloor: "‚åä",
        Lfr: "ùîè",
        lfr: "ùî©",
        lg: "‚â∂",
        lgE: "‚™ë",
        lHar: "‚•¢",
        lhard: "‚ÜΩ",
        lharu: "‚Üº",
        lharul: "‚•™",
        lhblk: "‚ñÑ",
        LJcy: "–â",
        ljcy: "—ô",
        llarr: "‚áá",
        ll: "‚â™",
        Ll: "‚ãò",
        llcorner: "‚åû",
        Lleftarrow: "‚áö",
        llhard: "‚•´",
        lltri: "‚ó∫",
        Lmidot: "ƒø",
        lmidot: "≈Ä",
        lmoustache: "‚é∞",
        lmoust: "‚é∞",
        lnap: "‚™â",
        lnapprox: "‚™â",
        lne: "‚™á",
        lnE: "‚â®",
        lneq: "‚™á",
        lneqq: "‚â®",
        lnsim: "‚ã¶",
        loang: "‚ü¨",
        loarr: "‚áΩ",
        lobrk: "‚ü¶",
        longleftarrow: "‚üµ",
        LongLeftArrow: "‚üµ",
        Longleftarrow: "‚ü∏",
        longleftrightarrow: "‚ü∑",
        LongLeftRightArrow: "‚ü∑",
        Longleftrightarrow: "‚ü∫",
        longmapsto: "‚üº",
        longrightarrow: "‚ü∂",
        LongRightArrow: "‚ü∂",
        Longrightarrow: "‚üπ",
        looparrowleft: "‚Ü´",
        looparrowright: "‚Ü¨",
        lopar: "‚¶Ö",
        Lopf: "ùïÉ",
        lopf: "ùïù",
        loplus: "‚®≠",
        lotimes: "‚®¥",
        lowast: "‚àó",
        lowbar: "_",
        LowerLeftArrow: "‚Üô",
        LowerRightArrow: "‚Üò",
        loz: "‚óä",
        lozenge: "‚óä",
        lozf: "‚ß´",
        lpar: "(",
        lparlt: "‚¶ì",
        lrarr: "‚áÜ",
        lrcorner: "‚åü",
        lrhar: "‚áã",
        lrhard: "‚•≠",
        lrm: "‚Äé",
        lrtri: "‚äø",
        lsaquo: "‚Äπ",
        lscr: "ùìÅ",
        Lscr: "‚Ñí",
        lsh: "‚Ü∞",
        Lsh: "‚Ü∞",
        lsim: "‚â≤",
        lsime: "‚™ç",
        lsimg: "‚™è",
        lsqb: "[",
        lsquo: "‚Äò",
        lsquor: "‚Äö",
        Lstrok: "≈Å",
        lstrok: "≈Ç",
        ltcc: "‚™¶",
        ltcir: "‚©π",
        lt: "<",
        LT: "<",
        Lt: "‚â™",
        ltdot: "‚ãñ",
        lthree: "‚ãã",
        ltimes: "‚ãâ",
        ltlarr: "‚•∂",
        ltquest: "‚©ª",
        ltri: "‚óÉ",
        ltrie: "‚ä¥",
        ltrif: "‚óÇ",
        ltrPar: "‚¶ñ",
        lurdshar: "‚•ä",
        luruhar: "‚•¶",
        lvertneqq: "‚â®Ô∏Ä",
        lvnE: "‚â®Ô∏Ä",
        macr: "¬Ø",
        male: "‚ôÇ",
        malt: "‚ú†",
        maltese: "‚ú†",
        Map: "‚§Ö",
        map: "‚Ü¶",
        mapsto: "‚Ü¶",
        mapstodown: "‚Üß",
        mapstoleft: "‚Ü§",
        mapstoup: "‚Ü•",
        marker: "‚ñÆ",
        mcomma: "‚®©",
        Mcy: "–ú",
        mcy: "–º",
        mdash: "‚Äî",
        mDDot: "‚à∫",
        measuredangle: "‚à°",
        MediumSpace: "‚Åü",
        Mellintrf: "‚Ñ≥",
        Mfr: "ùîê",
        mfr: "ùî™",
        mho: "‚Ñß",
        micro: "¬µ",
        midast: "*",
        midcir: "‚´∞",
        mid: "‚à£",
        middot: "¬∑",
        minusb: "‚äü",
        minus: "‚àí",
        minusd: "‚à∏",
        minusdu: "‚®™",
        MinusPlus: "‚àì",
        mlcp: "‚´õ",
        mldr: "‚Ä¶",
        mnplus: "‚àì",
        models: "‚äß",
        Mopf: "ùïÑ",
        mopf: "ùïû",
        mp: "‚àì",
        mscr: "ùìÇ",
        Mscr: "‚Ñ≥",
        mstpos: "‚àæ",
        Mu: "Œú",
        mu: "Œº",
        multimap: "‚ä∏",
        mumap: "‚ä∏",
        nabla: "‚àá",
        Nacute: "≈É",
        nacute: "≈Ñ",
        nang: "‚à†‚Éí",
        nap: "‚ââ",
        napE: "‚©∞Ã∏",
        napid: "‚âãÃ∏",
        napos: "≈â",
        napprox: "‚ââ",
        natural: "‚ôÆ",
        naturals: "‚Ñï",
        natur: "‚ôÆ",
        nbsp: "¬†",
        nbump: "‚âéÃ∏",
        nbumpe: "‚âèÃ∏",
        ncap: "‚©É",
        Ncaron: "≈á",
        ncaron: "≈à",
        Ncedil: "≈Ö",
        ncedil: "≈Ü",
        ncong: "‚âá",
        ncongdot: "‚©≠Ã∏",
        ncup: "‚©Ç",
        Ncy: "–ù",
        ncy: "–Ω",
        ndash: "‚Äì",
        nearhk: "‚§§",
        nearr: "‚Üó",
        neArr: "‚áó",
        nearrow: "‚Üó",
        ne: "‚â†",
        nedot: "‚âêÃ∏",
        NegativeMediumSpace: "‚Äã",
        NegativeThickSpace: "‚Äã",
        NegativeThinSpace: "‚Äã",
        NegativeVeryThinSpace: "‚Äã",
        nequiv: "‚â¢",
        nesear: "‚§®",
        nesim: "‚âÇÃ∏",
        NestedGreaterGreater: "‚â´",
        NestedLessLess: "‚â™",
        NewLine: "\n",
        nexist: "‚àÑ",
        nexists: "‚àÑ",
        Nfr: "ùîë",
        nfr: "ùî´",
        ngE: "‚âßÃ∏",
        nge: "‚â±",
        ngeq: "‚â±",
        ngeqq: "‚âßÃ∏",
        ngeqslant: "‚©æÃ∏",
        nges: "‚©æÃ∏",
        nGg: "‚ãôÃ∏",
        ngsim: "‚âµ",
        nGt: "‚â´‚Éí",
        ngt: "‚âØ",
        ngtr: "‚âØ",
        nGtv: "‚â´Ã∏",
        nharr: "‚ÜÆ",
        nhArr: "‚áé",
        nhpar: "‚´≤",
        ni: "‚àã",
        nis: "‚ãº",
        nisd: "‚ã∫",
        niv: "‚àã",
        NJcy: "–ä",
        njcy: "—ö",
        nlarr: "‚Üö",
        nlArr: "‚áç",
        nldr: "‚Ä•",
        nlE: "‚â¶Ã∏",
        nle: "‚â∞",
        nleftarrow: "‚Üö",
        nLeftarrow: "‚áç",
        nleftrightarrow: "‚ÜÆ",
        nLeftrightarrow: "‚áé",
        nleq: "‚â∞",
        nleqq: "‚â¶Ã∏",
        nleqslant: "‚©ΩÃ∏",
        nles: "‚©ΩÃ∏",
        nless: "‚âÆ",
        nLl: "‚ãòÃ∏",
        nlsim: "‚â¥",
        nLt: "‚â™‚Éí",
        nlt: "‚âÆ",
        nltri: "‚ã™",
        nltrie: "‚ã¨",
        nLtv: "‚â™Ã∏",
        nmid: "‚à§",
        NoBreak: "‚Å†",
        NonBreakingSpace: "¬†",
        nopf: "ùïü",
        Nopf: "‚Ñï",
        Not: "‚´¨",
        not: "¬¨",
        NotCongruent: "‚â¢",
        NotCupCap: "‚â≠",
        NotDoubleVerticalBar: "‚à¶",
        NotElement: "‚àâ",
        NotEqual: "‚â†",
        NotEqualTilde: "‚âÇÃ∏",
        NotExists: "‚àÑ",
        NotGreater: "‚âØ",
        NotGreaterEqual: "‚â±",
        NotGreaterFullEqual: "‚âßÃ∏",
        NotGreaterGreater: "‚â´Ã∏",
        NotGreaterLess: "‚âπ",
        NotGreaterSlantEqual: "‚©æÃ∏",
        NotGreaterTilde: "‚âµ",
        NotHumpDownHump: "‚âéÃ∏",
        NotHumpEqual: "‚âèÃ∏",
        notin: "‚àâ",
        notindot: "‚ãµÃ∏",
        notinE: "‚ãπÃ∏",
        notinva: "‚àâ",
        notinvb: "‚ã∑",
        notinvc: "‚ã∂",
        NotLeftTriangleBar: "‚ßèÃ∏",
        NotLeftTriangle: "‚ã™",
        NotLeftTriangleEqual: "‚ã¨",
        NotLess: "‚âÆ",
        NotLessEqual: "‚â∞",
        NotLessGreater: "‚â∏",
        NotLessLess: "‚â™Ã∏",
        NotLessSlantEqual: "‚©ΩÃ∏",
        NotLessTilde: "‚â¥",
        NotNestedGreaterGreater: "‚™¢Ã∏",
        NotNestedLessLess: "‚™°Ã∏",
        notni: "‚àå",
        notniva: "‚àå",
        notnivb: "‚ãæ",
        notnivc: "‚ãΩ",
        NotPrecedes: "‚äÄ",
        NotPrecedesEqual: "‚™ØÃ∏",
        NotPrecedesSlantEqual: "‚ã†",
        NotReverseElement: "‚àå",
        NotRightTriangleBar: "‚ßêÃ∏",
        NotRightTriangle: "‚ã´",
        NotRightTriangleEqual: "‚ã≠",
        NotSquareSubset: "‚äèÃ∏",
        NotSquareSubsetEqual: "‚ã¢",
        NotSquareSuperset: "‚äêÃ∏",
        NotSquareSupersetEqual: "‚ã£",
        NotSubset: "‚äÇ‚Éí",
        NotSubsetEqual: "‚äà",
        NotSucceeds: "‚äÅ",
        NotSucceedsEqual: "‚™∞Ã∏",
        NotSucceedsSlantEqual: "‚ã°",
        NotSucceedsTilde: "‚âøÃ∏",
        NotSuperset: "‚äÉ‚Éí",
        NotSupersetEqual: "‚äâ",
        NotTilde: "‚âÅ",
        NotTildeEqual: "‚âÑ",
        NotTildeFullEqual: "‚âá",
        NotTildeTilde: "‚ââ",
        NotVerticalBar: "‚à§",
        nparallel: "‚à¶",
        npar: "‚à¶",
        nparsl: "‚´Ω‚É•",
        npart: "‚àÇÃ∏",
        npolint: "‚®î",
        npr: "‚äÄ",
        nprcue: "‚ã†",
        nprec: "‚äÄ",
        npreceq: "‚™ØÃ∏",
        npre: "‚™ØÃ∏",
        nrarrc: "‚§≥Ã∏",
        nrarr: "‚Üõ",
        nrArr: "‚áè",
        nrarrw: "‚ÜùÃ∏",
        nrightarrow: "‚Üõ",
        nRightarrow: "‚áè",
        nrtri: "‚ã´",
        nrtrie: "‚ã≠",
        nsc: "‚äÅ",
        nsccue: "‚ã°",
        nsce: "‚™∞Ã∏",
        Nscr: "ùí©",
        nscr: "ùìÉ",
        nshortmid: "‚à§",
        nshortparallel: "‚à¶",
        nsim: "‚âÅ",
        nsime: "‚âÑ",
        nsimeq: "‚âÑ",
        nsmid: "‚à§",
        nspar: "‚à¶",
        nsqsube: "‚ã¢",
        nsqsupe: "‚ã£",
        nsub: "‚äÑ",
        nsubE: "‚´ÖÃ∏",
        nsube: "‚äà",
        nsubset: "‚äÇ‚Éí",
        nsubseteq: "‚äà",
        nsubseteqq: "‚´ÖÃ∏",
        nsucc: "‚äÅ",
        nsucceq: "‚™∞Ã∏",
        nsup: "‚äÖ",
        nsupE: "‚´ÜÃ∏",
        nsupe: "‚äâ",
        nsupset: "‚äÉ‚Éí",
        nsupseteq: "‚äâ",
        nsupseteqq: "‚´ÜÃ∏",
        ntgl: "‚âπ",
        Ntilde: "√ë",
        ntilde: "√±",
        ntlg: "‚â∏",
        ntriangleleft: "‚ã™",
        ntrianglelefteq: "‚ã¨",
        ntriangleright: "‚ã´",
        ntrianglerighteq: "‚ã≠",
        Nu: "Œù",
        nu: "ŒΩ",
        num: "#",
        numero: "‚Ññ",
        numsp: "‚Äá",
        nvap: "‚âç‚Éí",
        nvdash: "‚ä¨",
        nvDash: "‚ä≠",
        nVdash: "‚äÆ",
        nVDash: "‚äØ",
        nvge: "‚â•‚Éí",
        nvgt: ">‚Éí",
        nvHarr: "‚§Ñ",
        nvinfin: "‚ßû",
        nvlArr: "‚§Ç",
        nvle: "‚â§‚Éí",
        nvlt: "<‚Éí",
        nvltrie: "‚ä¥‚Éí",
        nvrArr: "‚§É",
        nvrtrie: "‚äµ‚Éí",
        nvsim: "‚àº‚Éí",
        nwarhk: "‚§£",
        nwarr: "‚Üñ",
        nwArr: "‚áñ",
        nwarrow: "‚Üñ",
        nwnear: "‚§ß",
        Oacute: "√ì",
        oacute: "√≥",
        oast: "‚äõ",
        Ocirc: "√î",
        ocirc: "√¥",
        ocir: "‚äö",
        Ocy: "–û",
        ocy: "–æ",
        odash: "‚äù",
        Odblac: "≈ê",
        odblac: "≈ë",
        odiv: "‚®∏",
        odot: "‚äô",
        odsold: "‚¶º",
        OElig: "≈í",
        oelig: "≈ì",
        ofcir: "‚¶ø",
        Ofr: "ùîí",
        ofr: "ùî¨",
        ogon: "Àõ",
        Ograve: "√í",
        ograve: "√≤",
        ogt: "‚ßÅ",
        ohbar: "‚¶µ",
        ohm: "Œ©",
        oint: "‚àÆ",
        olarr: "‚Ü∫",
        olcir: "‚¶æ",
        olcross: "‚¶ª",
        oline: "‚Äæ",
        olt: "‚ßÄ",
        Omacr: "≈å",
        omacr: "≈ç",
        Omega: "Œ©",
        omega: "œâ",
        Omicron: "Œü",
        omicron: "Œø",
        omid: "‚¶∂",
        ominus: "‚äñ",
        Oopf: "ùïÜ",
        oopf: "ùï†",
        opar: "‚¶∑",
        OpenCurlyDoubleQuote: "‚Äú",
        OpenCurlyQuote: "‚Äò",
        operp: "‚¶π",
        oplus: "‚äï",
        orarr: "‚Üª",
        Or: "‚©î",
        or: "‚à®",
        ord: "‚©ù",
        order: "‚Ñ¥",
        orderof: "‚Ñ¥",
        ordf: "¬™",
        ordm: "¬∫",
        origof: "‚ä∂",
        oror: "‚©ñ",
        orslope: "‚©ó",
        orv: "‚©õ",
        oS: "‚ìà",
        Oscr: "ùí™",
        oscr: "‚Ñ¥",
        Oslash: "√ò",
        oslash: "√∏",
        osol: "‚äò",
        Otilde: "√ï",
        otilde: "√µ",
        otimesas: "‚®∂",
        Otimes: "‚®∑",
        otimes: "‚äó",
        Ouml: "√ñ",
        ouml: "√∂",
        ovbar: "‚åΩ",
        OverBar: "‚Äæ",
        OverBrace: "‚èû",
        OverBracket: "‚é¥",
        OverParenthesis: "‚èú",
        para: "¬∂",
        parallel: "‚à•",
        par: "‚à•",
        parsim: "‚´≥",
        parsl: "‚´Ω",
        part: "‚àÇ",
        PartialD: "‚àÇ",
        Pcy: "–ü",
        pcy: "–ø",
        percnt: "%",
        period: ".",
        permil: "‚Ä∞",
        perp: "‚ä•",
        pertenk: "‚Ä±",
        Pfr: "ùîì",
        pfr: "ùî≠",
        Phi: "Œ¶",
        phi: "œÜ",
        phiv: "œï",
        phmmat: "‚Ñ≥",
        phone: "‚òé",
        Pi: "Œ†",
        pi: "œÄ",
        pitchfork: "‚ãî",
        piv: "œñ",
        planck: "‚Ñè",
        planckh: "‚Ñé",
        plankv: "‚Ñè",
        plusacir: "‚®£",
        plusb: "‚äû",
        pluscir: "‚®¢",
        plus: "+",
        plusdo: "‚àî",
        plusdu: "‚®•",
        pluse: "‚©≤",
        PlusMinus: "¬±",
        plusmn: "¬±",
        plussim: "‚®¶",
        plustwo: "‚®ß",
        pm: "¬±",
        Poincareplane: "‚Ñå",
        pointint: "‚®ï",
        popf: "ùï°",
        Popf: "‚Ñô",
        pound: "¬£",
        prap: "‚™∑",
        Pr: "‚™ª",
        pr: "‚â∫",
        prcue: "‚âº",
        precapprox: "‚™∑",
        prec: "‚â∫",
        preccurlyeq: "‚âº",
        Precedes: "‚â∫",
        PrecedesEqual: "‚™Ø",
        PrecedesSlantEqual: "‚âº",
        PrecedesTilde: "‚âæ",
        preceq: "‚™Ø",
        precnapprox: "‚™π",
        precneqq: "‚™µ",
        precnsim: "‚ã®",
        pre: "‚™Ø",
        prE: "‚™≥",
        precsim: "‚âæ",
        prime: "‚Ä≤",
        Prime: "‚Ä≥",
        primes: "‚Ñô",
        prnap: "‚™π",
        prnE: "‚™µ",
        prnsim: "‚ã®",
        prod: "‚àè",
        Product: "‚àè",
        profalar: "‚åÆ",
        profline: "‚åí",
        profsurf: "‚åì",
        prop: "‚àù",
        Proportional: "‚àù",
        Proportion: "‚à∑",
        propto: "‚àù",
        prsim: "‚âæ",
        prurel: "‚ä∞",
        Pscr: "ùí´",
        pscr: "ùìÖ",
        Psi: "Œ®",
        psi: "œà",
        puncsp: "‚Äà",
        Qfr: "ùîî",
        qfr: "ùîÆ",
        qint: "‚®å",
        qopf: "ùï¢",
        Qopf: "‚Ñö",
        qprime: "‚Åó",
        Qscr: "ùí¨",
        qscr: "ùìÜ",
        quaternions: "‚Ñç",
        quatint: "‚®ñ",
        quest: "?",
        questeq: "‚âü",
        quot: '"',
        QUOT: '"',
        rAarr: "‚áõ",
        race: "‚àΩÃ±",
        Racute: "≈î",
        racute: "≈ï",
        radic: "‚àö",
        raemptyv: "‚¶≥",
        rang: "‚ü©",
        Rang: "‚ü´",
        rangd: "‚¶í",
        range: "‚¶•",
        rangle: "‚ü©",
        raquo: "¬ª",
        rarrap: "‚•µ",
        rarrb: "‚á•",
        rarrbfs: "‚§†",
        rarrc: "‚§≥",
        rarr: "‚Üí",
        Rarr: "‚Ü†",
        rArr: "‚áí",
        rarrfs: "‚§û",
        rarrhk: "‚Ü™",
        rarrlp: "‚Ü¨",
        rarrpl: "‚•Ö",
        rarrsim: "‚•¥",
        Rarrtl: "‚§ñ",
        rarrtl: "‚Ü£",
        rarrw: "‚Üù",
        ratail: "‚§ö",
        rAtail: "‚§ú",
        ratio: "‚à∂",
        rationals: "‚Ñö",
        rbarr: "‚§ç",
        rBarr: "‚§è",
        RBarr: "‚§ê",
        rbbrk: "‚ù≥",
        rbrace: "}",
        rbrack: "]",
        rbrke: "‚¶å",
        rbrksld: "‚¶é",
        rbrkslu: "‚¶ê",
        Rcaron: "≈ò",
        rcaron: "≈ô",
        Rcedil: "≈ñ",
        rcedil: "≈ó",
        rceil: "‚åâ",
        rcub: "}",
        Rcy: "–†",
        rcy: "—Ä",
        rdca: "‚§∑",
        rdldhar: "‚•©",
        rdquo: "‚Äù",
        rdquor: "‚Äù",
        rdsh: "‚Ü≥",
        real: "‚Ñú",
        realine: "‚Ñõ",
        realpart: "‚Ñú",
        reals: "‚Ñù",
        Re: "‚Ñú",
        rect: "‚ñ≠",
        reg: "¬Æ",
        REG: "¬Æ",
        ReverseElement: "‚àã",
        ReverseEquilibrium: "‚áã",
        ReverseUpEquilibrium: "‚•Ø",
        rfisht: "‚•Ω",
        rfloor: "‚åã",
        rfr: "ùîØ",
        Rfr: "‚Ñú",
        rHar: "‚•§",
        rhard: "‚áÅ",
        rharu: "‚áÄ",
        rharul: "‚•¨",
        Rho: "Œ°",
        rho: "œÅ",
        rhov: "œ±",
        RightAngleBracket: "‚ü©",
        RightArrowBar: "‚á•",
        rightarrow: "‚Üí",
        RightArrow: "‚Üí",
        Rightarrow: "‚áí",
        RightArrowLeftArrow: "‚áÑ",
        rightarrowtail: "‚Ü£",
        RightCeiling: "‚åâ",
        RightDoubleBracket: "‚üß",
        RightDownTeeVector: "‚•ù",
        RightDownVectorBar: "‚•ï",
        RightDownVector: "‚áÇ",
        RightFloor: "‚åã",
        rightharpoondown: "‚áÅ",
        rightharpoonup: "‚áÄ",
        rightleftarrows: "‚áÑ",
        rightleftharpoons: "‚áå",
        rightrightarrows: "‚áâ",
        rightsquigarrow: "‚Üù",
        RightTeeArrow: "‚Ü¶",
        RightTee: "‚ä¢",
        RightTeeVector: "‚•õ",
        rightthreetimes: "‚ãå",
        RightTriangleBar: "‚ßê",
        RightTriangle: "‚ä≥",
        RightTriangleEqual: "‚äµ",
        RightUpDownVector: "‚•è",
        RightUpTeeVector: "‚•ú",
        RightUpVectorBar: "‚•î",
        RightUpVector: "‚Üæ",
        RightVectorBar: "‚•ì",
        RightVector: "‚áÄ",
        ring: "Àö",
        risingdotseq: "‚âì",
        rlarr: "‚áÑ",
        rlhar: "‚áå",
        rlm: "‚Äè",
        rmoustache: "‚é±",
        rmoust: "‚é±",
        rnmid: "‚´Æ",
        roang: "‚ü≠",
        roarr: "‚áæ",
        robrk: "‚üß",
        ropar: "‚¶Ü",
        ropf: "ùï£",
        Ropf: "‚Ñù",
        roplus: "‚®Æ",
        rotimes: "‚®µ",
        RoundImplies: "‚•∞",
        rpar: ")",
        rpargt: "‚¶î",
        rppolint: "‚®í",
        rrarr: "‚áâ",
        Rrightarrow: "‚áõ",
        rsaquo: "‚Ä∫",
        rscr: "ùìá",
        Rscr: "‚Ñõ",
        rsh: "‚Ü±",
        Rsh: "‚Ü±",
        rsqb: "]",
        rsquo: "‚Äô",
        rsquor: "‚Äô",
        rthree: "‚ãå",
        rtimes: "‚ãä",
        rtri: "‚ñπ",
        rtrie: "‚äµ",
        rtrif: "‚ñ∏",
        rtriltri: "‚ßé",
        RuleDelayed: "‚ß¥",
        ruluhar: "‚•®",
        rx: "‚Ñû",
        Sacute: "≈ö",
        sacute: "≈õ",
        sbquo: "‚Äö",
        scap: "‚™∏",
        Scaron: "≈†",
        scaron: "≈°",
        Sc: "‚™º",
        sc: "‚âª",
        sccue: "‚âΩ",
        sce: "‚™∞",
        scE: "‚™¥",
        Scedil: "≈û",
        scedil: "≈ü",
        Scirc: "≈ú",
        scirc: "≈ù",
        scnap: "‚™∫",
        scnE: "‚™∂",
        scnsim: "‚ã©",
        scpolint: "‚®ì",
        scsim: "‚âø",
        Scy: "–°",
        scy: "—Å",
        sdotb: "‚ä°",
        sdot: "‚ãÖ",
        sdote: "‚©¶",
        searhk: "‚§•",
        searr: "‚Üò",
        seArr: "‚áò",
        searrow: "‚Üò",
        sect: "¬ß",
        semi: ";",
        seswar: "‚§©",
        setminus: "‚àñ",
        setmn: "‚àñ",
        sext: "‚ú∂",
        Sfr: "ùîñ",
        sfr: "ùî∞",
        sfrown: "‚å¢",
        sharp: "‚ôØ",
        SHCHcy: "–©",
        shchcy: "—â",
        SHcy: "–®",
        shcy: "—à",
        ShortDownArrow: "‚Üì",
        ShortLeftArrow: "‚Üê",
        shortmid: "‚à£",
        shortparallel: "‚à•",
        ShortRightArrow: "‚Üí",
        ShortUpArrow: "‚Üë",
        shy: "¬≠",
        Sigma: "Œ£",
        sigma: "œÉ",
        sigmaf: "œÇ",
        sigmav: "œÇ",
        sim: "‚àº",
        simdot: "‚©™",
        sime: "‚âÉ",
        simeq: "‚âÉ",
        simg: "‚™û",
        simgE: "‚™†",
        siml: "‚™ù",
        simlE: "‚™ü",
        simne: "‚âÜ",
        simplus: "‚®§",
        simrarr: "‚•≤",
        slarr: "‚Üê",
        SmallCircle: "‚àò",
        smallsetminus: "‚àñ",
        smashp: "‚®≥",
        smeparsl: "‚ß§",
        smid: "‚à£",
        smile: "‚å£",
        smt: "‚™™",
        smte: "‚™¨",
        smtes: "‚™¨Ô∏Ä",
        SOFTcy: "–¨",
        softcy: "—å",
        solbar: "‚åø",
        solb: "‚ßÑ",
        sol: "/",
        Sopf: "ùïä",
        sopf: "ùï§",
        spades: "‚ô†",
        spadesuit: "‚ô†",
        spar: "‚à•",
        sqcap: "‚äì",
        sqcaps: "‚äìÔ∏Ä",
        sqcup: "‚äî",
        sqcups: "‚äîÔ∏Ä",
        Sqrt: "‚àö",
        sqsub: "‚äè",
        sqsube: "‚äë",
        sqsubset: "‚äè",
        sqsubseteq: "‚äë",
        sqsup: "‚äê",
        sqsupe: "‚äí",
        sqsupset: "‚äê",
        sqsupseteq: "‚äí",
        square: "‚ñ°",
        Square: "‚ñ°",
        SquareIntersection: "‚äì",
        SquareSubset: "‚äè",
        SquareSubsetEqual: "‚äë",
        SquareSuperset: "‚äê",
        SquareSupersetEqual: "‚äí",
        SquareUnion: "‚äî",
        squarf: "‚ñ™",
        squ: "‚ñ°",
        squf: "‚ñ™",
        srarr: "‚Üí",
        Sscr: "ùíÆ",
        sscr: "ùìà",
        ssetmn: "‚àñ",
        ssmile: "‚å£",
        sstarf: "‚ãÜ",
        Star: "‚ãÜ",
        star: "‚òÜ",
        starf: "‚òÖ",
        straightepsilon: "œµ",
        straightphi: "œï",
        strns: "¬Ø",
        sub: "‚äÇ",
        Sub: "‚ãê",
        subdot: "‚™Ω",
        subE: "‚´Ö",
        sube: "‚äÜ",
        subedot: "‚´É",
        submult: "‚´Å",
        subnE: "‚´ã",
        subne: "‚ää",
        subplus: "‚™ø",
        subrarr: "‚•π",
        subset: "‚äÇ",
        Subset: "‚ãê",
        subseteq: "‚äÜ",
        subseteqq: "‚´Ö",
        SubsetEqual: "‚äÜ",
        subsetneq: "‚ää",
        subsetneqq: "‚´ã",
        subsim: "‚´á",
        subsub: "‚´ï",
        subsup: "‚´ì",
        succapprox: "‚™∏",
        succ: "‚âª",
        succcurlyeq: "‚âΩ",
        Succeeds: "‚âª",
        SucceedsEqual: "‚™∞",
        SucceedsSlantEqual: "‚âΩ",
        SucceedsTilde: "‚âø",
        succeq: "‚™∞",
        succnapprox: "‚™∫",
        succneqq: "‚™∂",
        succnsim: "‚ã©",
        succsim: "‚âø",
        SuchThat: "‚àã",
        sum: "‚àë",
        Sum: "‚àë",
        sung: "‚ô™",
        sup1: "¬π",
        sup2: "¬≤",
        sup3: "¬≥",
        sup: "‚äÉ",
        Sup: "‚ãë",
        supdot: "‚™æ",
        supdsub: "‚´ò",
        supE: "‚´Ü",
        supe: "‚äá",
        supedot: "‚´Ñ",
        Superset: "‚äÉ",
        SupersetEqual: "‚äá",
        suphsol: "‚üâ",
        suphsub: "‚´ó",
        suplarr: "‚•ª",
        supmult: "‚´Ç",
        supnE: "‚´å",
        supne: "‚äã",
        supplus: "‚´Ä",
        supset: "‚äÉ",
        Supset: "‚ãë",
        supseteq: "‚äá",
        supseteqq: "‚´Ü",
        supsetneq: "‚äã",
        supsetneqq: "‚´å",
        supsim: "‚´à",
        supsub: "‚´î",
        supsup: "‚´ñ",
        swarhk: "‚§¶",
        swarr: "‚Üô",
        swArr: "‚áô",
        swarrow: "‚Üô",
        swnwar: "‚§™",
        szlig: "√ü",
        Tab: "	",
        target: "‚åñ",
        Tau: "Œ§",
        tau: "œÑ",
        tbrk: "‚é¥",
        Tcaron: "≈§",
        tcaron: "≈•",
        Tcedil: "≈¢",
        tcedil: "≈£",
        Tcy: "–¢",
        tcy: "—Ç",
        tdot: "‚Éõ",
        telrec: "‚åï",
        Tfr: "ùîó",
        tfr: "ùî±",
        there4: "‚à¥",
        therefore: "‚à¥",
        Therefore: "‚à¥",
        Theta: "Œò",
        theta: "Œ∏",
        thetasym: "œë",
        thetav: "œë",
        thickapprox: "‚âà",
        thicksim: "‚àº",
        ThickSpace: "‚Åü‚Ää",
        ThinSpace: "‚Äâ",
        thinsp: "‚Äâ",
        thkap: "‚âà",
        thksim: "‚àº",
        THORN: "√û",
        thorn: "√æ",
        tilde: "Àú",
        Tilde: "‚àº",
        TildeEqual: "‚âÉ",
        TildeFullEqual: "‚âÖ",
        TildeTilde: "‚âà",
        timesbar: "‚®±",
        timesb: "‚ä†",
        times: "√ó",
        timesd: "‚®∞",
        tint: "‚à≠",
        toea: "‚§®",
        topbot: "‚å∂",
        topcir: "‚´±",
        top: "‚ä§",
        Topf: "ùïã",
        topf: "ùï•",
        topfork: "‚´ö",
        tosa: "‚§©",
        tprime: "‚Ä¥",
        trade: "‚Ñ¢",
        TRADE: "‚Ñ¢",
        triangle: "‚ñµ",
        triangledown: "‚ñø",
        triangleleft: "‚óÉ",
        trianglelefteq: "‚ä¥",
        triangleq: "‚âú",
        triangleright: "‚ñπ",
        trianglerighteq: "‚äµ",
        tridot: "‚ó¨",
        trie: "‚âú",
        triminus: "‚®∫",
        TripleDot: "‚Éõ",
        triplus: "‚®π",
        trisb: "‚ßç",
        tritime: "‚®ª",
        trpezium: "‚è¢",
        Tscr: "ùíØ",
        tscr: "ùìâ",
        TScy: "–¶",
        tscy: "—Ü",
        TSHcy: "–ã",
        tshcy: "—õ",
        Tstrok: "≈¶",
        tstrok: "≈ß",
        twixt: "‚â¨",
        twoheadleftarrow: "‚Üû",
        twoheadrightarrow: "‚Ü†",
        Uacute: "√ö",
        uacute: "√∫",
        uarr: "‚Üë",
        Uarr: "‚Üü",
        uArr: "‚áë",
        Uarrocir: "‚•â",
        Ubrcy: "–é",
        ubrcy: "—û",
        Ubreve: "≈¨",
        ubreve: "≈≠",
        Ucirc: "√õ",
        ucirc: "√ª",
        Ucy: "–£",
        ucy: "—É",
        udarr: "‚áÖ",
        Udblac: "≈∞",
        udblac: "≈±",
        udhar: "‚•Æ",
        ufisht: "‚•æ",
        Ufr: "ùîò",
        ufr: "ùî≤",
        Ugrave: "√ô",
        ugrave: "√π",
        uHar: "‚•£",
        uharl: "‚Üø",
        uharr: "‚Üæ",
        uhblk: "‚ñÄ",
        ulcorn: "‚åú",
        ulcorner: "‚åú",
        ulcrop: "‚åè",
        ultri: "‚ó∏",
        Umacr: "≈™",
        umacr: "≈´",
        uml: "¬®",
        UnderBar: "_",
        UnderBrace: "‚èü",
        UnderBracket: "‚éµ",
        UnderParenthesis: "‚èù",
        Union: "‚ãÉ",
        UnionPlus: "‚äé",
        Uogon: "≈≤",
        uogon: "≈≥",
        Uopf: "ùïå",
        uopf: "ùï¶",
        UpArrowBar: "‚§í",
        uparrow: "‚Üë",
        UpArrow: "‚Üë",
        Uparrow: "‚áë",
        UpArrowDownArrow: "‚áÖ",
        updownarrow: "‚Üï",
        UpDownArrow: "‚Üï",
        Updownarrow: "‚áï",
        UpEquilibrium: "‚•Æ",
        upharpoonleft: "‚Üø",
        upharpoonright: "‚Üæ",
        uplus: "‚äé",
        UpperLeftArrow: "‚Üñ",
        UpperRightArrow: "‚Üó",
        upsi: "œÖ",
        Upsi: "œí",
        upsih: "œí",
        Upsilon: "Œ•",
        upsilon: "œÖ",
        UpTeeArrow: "‚Ü•",
        UpTee: "‚ä•",
        upuparrows: "‚áà",
        urcorn: "‚åù",
        urcorner: "‚åù",
        urcrop: "‚åé",
        Uring: "≈Æ",
        uring: "≈Ø",
        urtri: "‚óπ",
        Uscr: "ùí∞",
        uscr: "ùìä",
        utdot: "‚ã∞",
        Utilde: "≈®",
        utilde: "≈©",
        utri: "‚ñµ",
        utrif: "‚ñ¥",
        uuarr: "‚áà",
        Uuml: "√ú",
        uuml: "√º",
        uwangle: "‚¶ß",
        vangrt: "‚¶ú",
        varepsilon: "œµ",
        varkappa: "œ∞",
        varnothing: "‚àÖ",
        varphi: "œï",
        varpi: "œñ",
        varpropto: "‚àù",
        varr: "‚Üï",
        vArr: "‚áï",
        varrho: "œ±",
        varsigma: "œÇ",
        varsubsetneq: "‚ääÔ∏Ä",
        varsubsetneqq: "‚´ãÔ∏Ä",
        varsupsetneq: "‚äãÔ∏Ä",
        varsupsetneqq: "‚´åÔ∏Ä",
        vartheta: "œë",
        vartriangleleft: "‚ä≤",
        vartriangleright: "‚ä≥",
        vBar: "‚´®",
        Vbar: "‚´´",
        vBarv: "‚´©",
        Vcy: "–í",
        vcy: "–≤",
        vdash: "‚ä¢",
        vDash: "‚ä®",
        Vdash: "‚ä©",
        VDash: "‚ä´",
        Vdashl: "‚´¶",
        veebar: "‚äª",
        vee: "‚à®",
        Vee: "‚ãÅ",
        veeeq: "‚âö",
        vellip: "‚ãÆ",
        verbar: "|",
        Verbar: "‚Äñ",
        vert: "|",
        Vert: "‚Äñ",
        VerticalBar: "‚à£",
        VerticalLine: "|",
        VerticalSeparator: "‚ùò",
        VerticalTilde: "‚âÄ",
        VeryThinSpace: "‚Ää",
        Vfr: "ùîô",
        vfr: "ùî≥",
        vltri: "‚ä≤",
        vnsub: "‚äÇ‚Éí",
        vnsup: "‚äÉ‚Éí",
        Vopf: "ùïç",
        vopf: "ùïß",
        vprop: "‚àù",
        vrtri: "‚ä≥",
        Vscr: "ùí±",
        vscr: "ùìã",
        vsubnE: "‚´ãÔ∏Ä",
        vsubne: "‚ääÔ∏Ä",
        vsupnE: "‚´åÔ∏Ä",
        vsupne: "‚äãÔ∏Ä",
        Vvdash: "‚ä™",
        vzigzag: "‚¶ö",
        Wcirc: "≈¥",
        wcirc: "≈µ",
        wedbar: "‚©ü",
        wedge: "‚àß",
        Wedge: "‚ãÄ",
        wedgeq: "‚âô",
        weierp: "‚Ñò",
        Wfr: "ùîö",
        wfr: "ùî¥",
        Wopf: "ùïé",
        wopf: "ùï®",
        wp: "‚Ñò",
        wr: "‚âÄ",
        wreath: "‚âÄ",
        Wscr: "ùí≤",
        wscr: "ùìå",
        xcap: "‚ãÇ",
        xcirc: "‚óØ",
        xcup: "‚ãÉ",
        xdtri: "‚ñΩ",
        Xfr: "ùîõ",
        xfr: "ùîµ",
        xharr: "‚ü∑",
        xhArr: "‚ü∫",
        Xi: "Œû",
        xi: "Œæ",
        xlarr: "‚üµ",
        xlArr: "‚ü∏",
        xmap: "‚üº",
        xnis: "‚ãª",
        xodot: "‚®Ä",
        Xopf: "ùïè",
        xopf: "ùï©",
        xoplus: "‚®Å",
        xotime: "‚®Ç",
        xrarr: "‚ü∂",
        xrArr: "‚üπ",
        Xscr: "ùí≥",
        xscr: "ùìç",
        xsqcup: "‚®Ü",
        xuplus: "‚®Ñ",
        xutri: "‚ñ≥",
        xvee: "‚ãÅ",
        xwedge: "‚ãÄ",
        Yacute: "√ù",
        yacute: "√Ω",
        YAcy: "–Ø",
        yacy: "—è",
        Ycirc: "≈∂",
        ycirc: "≈∑",
        Ycy: "–´",
        ycy: "—ã",
        yen: "¬•",
        Yfr: "ùîú",
        yfr: "ùî∂",
        YIcy: "–á",
        yicy: "—ó",
        Yopf: "ùïê",
        yopf: "ùï™",
        Yscr: "ùí¥",
        yscr: "ùìé",
        YUcy: "–Æ",
        yucy: "—é",
        yuml: "√ø",
        Yuml: "≈∏",
        Zacute: "≈π",
        zacute: "≈∫",
        Zcaron: "≈Ω",
        zcaron: "≈æ",
        Zcy: "–ó",
        zcy: "–∑",
        Zdot: "≈ª",
        zdot: "≈º",
        zeetrf: "‚Ñ®",
        ZeroWidthSpace: "‚Äã",
        Zeta: "Œñ",
        zeta: "Œ∂",
        zfr: "ùî∑",
        Zfr: "‚Ñ®",
        ZHcy: "–ñ",
        zhcy: "–∂",
        zigrarr: "‚áù",
        zopf: "ùï´",
        Zopf: "‚Ñ§",
        Zscr: "ùíµ",
        zscr: "ùìè",
        zwj: "‚Äç",
        zwnj: "‚Äå"
      };
    }, function(e, t) {
      e.exports = {
        amp: "&",
        apos: "'",
        gt: ">",
        lt: "<",
        quot: '"'
      };
    }, function(e, t, r) {
      "use strict";
      var n = r(2),
          i = r(27),
          a = r(8),
          s = r(9),
          o = r(10),
          u = e.exports = n.createClass({
            displayName: "Demo",
            getInitialState: function() {
              return {
                markdownSrc: ["# Live demo\n\nChanges are automatically rendered as you type.\n\n* Follows the ", '[CommonMark](http://commonmark.org/) spec\n* Renders actual, "native" React DOM ', "elements\n* Allows you to escape or skip HTML (try toggling the checkboxes above)", "\n* If you escape or skip the HTML, no `dangerouslySetInnerHTML` is used! Yay!\n", "\n## HTML block below\n\n<blockquote>\n    This blockquote will change based ", "on the HTML settings above.\n</blockquote>\n\n## How about some code?\n", "```js\nvar React = require('react');\nvar Markdown = require('react-markdown');", '\n\nReact.render(\n    <Markdown source="# Your markdown here" />,\n    document.', "getElementById('content')\n);\n```\n\nPretty neat, eh?\n\n", "## More info?\n\n", "Read usage information and more on [GitHub](//github.com/rexxars/react-markdown)\n\n", "---------------\n\n", "A component by [VaffelNinja](http://vaffel.ninja) / Espen Hovlandsdal"].join(""),
                htmlMode: "raw"
              };
            },
            onMarkdownChange: function(e) {
              this.setState({markdownSrc: e});
            },
            highlightCodeBlocks: function() {
              if (-1 !== this.state.markdownSrc.indexOf("```"))
                for (var e = document.querySelectorAll("pre code"),
                    t = 0; t < e.length; t++)
                  window.hljs.highlightBlock(e[t]);
            },
            componentDidMount: function() {
              this.highlightCodeBlocks();
            },
            componentDidUpdate: function() {
              this.highlightCodeBlocks();
            },
            onControlsChange: function(e) {
              this.setState({htmlMode: e});
            },
            render: function() {
              return n.createElement("div", {className: "demo"}, n.createElement("div", {className: "editor-pane"}, n.createElement(s, {
                onChange: this.onControlsChange,
                mode: this.state.htmlMode
              }), n.createElement(a, {
                value: this.state.markdownSrc,
                onChange: this.onMarkdownChange
              })), n.createElement("div", {className: "result-pane"}, n.createElement(o, {
                className: "result",
                source: this.state.markdownSrc,
                skipHtml: "skip" === this.state.htmlMode,
                escapeHtml: "escape" === this.state.htmlMode
              })));
            }
          });
      "undefined" != typeof window && i.render(n.createElement(u, null), document.getElementById("main"));
    }, function(e, t, r) {
      "use strict";
      var n = r(2),
          i = window.CodeMirrorEditor;
      e.exports = n.createClass({
        displayName: "Editor",
        propTypes: {
          onChange: n.PropTypes.func.isRequired,
          value: n.PropTypes.string
        },
        onInputChange: function(e) {
          this.props.onChange(e.target.value);
        },
        render: function() {
          return n.createElement("form", {className: "editor pure-form"}, n.createElement(i, {
            mode: "markdown",
            theme: "monokai",
            value: this.props.value,
            onChange: this.onInputChange
          }));
        }
      });
    }, function(e, t, r) {
      "use strict";
      var n = r(2);
      e.exports = n.createClass({
        displayName: "MarkdownControls",
        propTypes: {
          mode: n.PropTypes.string.isRequired,
          onChange: n.PropTypes.func.isRequired
        },
        getDefaultProps: function() {
          return {mode: "raw"};
        },
        onChange: function(e) {
          this.props.onChange(e.target.value);
        },
        render: function() {
          var e = "raw" === this.props.mode,
              t = "skip" === this.props.mode,
              r = "escape" === this.props.mode;
          return n.createElement("div", {className: "markdown-controls"}, n.createElement("form", {className: "pure-form pure-form-inline"}, n.createElement("fieldset", null, n.createElement("legend", null, "HTML mode:"), n.createElement("label", {
            htmlFor: "raw-html",
            className: "pure-checkbox"
          }, "Raw¬†", n.createElement("input", {
            id: "raw-html",
            name: "html-mode",
            type: "radio",
            value: "raw",
            checked: e,
            onChange: this.onChange
          })), n.createElement("label", {
            htmlFor: "escape-html",
            className: "pure-checkbox"
          }, "Escape¬†", n.createElement("input", {
            id: "escape-html",
            name: "html-mode",
            type: "radio",
            value: "escape",
            checked: r,
            onChange: this.onChange
          })), n.createElement("label", {
            htmlFor: "skip-html",
            className: "pure-checkbox"
          }, "Skip¬†", n.createElement("input", {
            id: "skip-html",
            name: "html-mode",
            type: "radio",
            value: "skip",
            checked: t,
            onChange: this.onChange
          })))));
        }
      });
    }, function(e, t, r) {
      "use strict";
      var n = r(2),
          i = r(15).Parser,
          a = r(11),
          s = new i,
          o = n.PropTypes,
          u = n.createClass({
            displayName: "ReactMarkdown",
            propTypes: {
              className: o.string,
              source: o.string.isRequired,
              containerTagName: o.string,
              sourcePos: o.bool,
              escapeHtml: o.bool,
              skipHtml: o.bool,
              softBreak: o.string,
              allowNode: o.func,
              allowedTypes: o.array,
              disallowedTypes: o.array
            },
            getDefaultProps: function() {
              return {containerTagName: "div"};
            },
            render: function() {
              var e = {},
                  t = new a(this.props),
                  r = s.parse(this.props.source || "");
              return this.props.className && (e.className = this.props.className), n.createElement.apply(n, [this.props.containerTagName, e].concat(t.render(r)));
            }
          });
      e.exports = u;
    }, function(e, t, r) {
      "use strict";
      function n(e, t, r, n) {
        e.react = {
          tag: t,
          props: r,
          children: n || []
        };
      }
      function i(e) {
        var t = e.parent.parent;
        return t && "List" === t.type && t.listTight;
      }
      function a(e, t) {
        var r = e;
        do
          r = r.parent;
 while (!r.react);
        r.react.children.push(t);
      }
      function s(e, t, r) {
        var n = [e, t].concat(r),
            i = l.createElement.apply(l, n);
        return i;
      }
      function o(e) {
        for (var t,
            r,
            o,
            u,
            c,
            p,
            h,
            d = e.walker(),
            f = this.sourcePos,
            m = this.escapeHtml,
            g = this.skipHtml,
            b = "br" === this.softBreak ? l.createElement("br") : this.softBreak; r = d.next(); ) {
          if (u = r.entering, c = !u, o = r.node, p = {}, h || (h = o, o.react = {children: []}), f && o.sourcepos) {
            var v = o.sourcepos;
            p["data-sourcepos"] = [v[0][0], ":", v[0][1], "-", v[1][0], ":", v[1][1]].map(String).join("");
          }
          if ("Paragraph" !== o.type || !i(o))
            if (c) {
              if ("Image" === o.type && (o.react.props.alt = o.react.children[0], o.react.children = []), o !== h && this.allowNode && !this.allowNode({
                type: o.type,
                tag: o.react.tag,
                props: o.react.props,
                children: o.react.children
              }))
                continue;
              var C = -1 !== this.allowedTypes.indexOf(o.type);
              o !== h && C && a(o, s(o.react.tag, o.react.props, o.react.children));
            } else
              switch (o.type) {
                case "Html":
                case "HtmlBlock":
                  m ? a(o, o.literal) : g || (p.dangerouslySetInnerHTML = {__html: o.literal}, a(o, s("Html" === o.type ? "span" : "div", p)));
                  break;
                case "Text":
                  a(o, o.literal);
                  break;
                case "Paragraph":
                  n(o, "p", p);
                  break;
                case "Header":
                  n(o, "h" + o.level, p);
                  break;
                case "Softbreak":
                  a(o, b);
                  break;
                case "Hardbreak":
                  a(o, l.createElement("br"));
                  break;
                case "Strong":
                  n(o, "strong", p);
                  break;
                case "Link":
                  p.href = o.destination, o.title && (p.title = o.title), n(o, "a", p);
                  break;
                case "Image":
                  p.src = o.destination, o.title && (p.title = o.title), n(o, "img", p);
                  break;
                case "Emph":
                  n(o, "em", p);
                  break;
                case "Code":
                  a(o, s("code", p, [o.literal]));
                  break;
                case "CodeBlock":
                  t = o.info ? o.info.split(/ +/) : [], t.length > 0 && t[0].length > 0 && (p.className = "language-" + t[0]);
                  var E = s("code", p, [o.literal]);
                  a(o, s("pre", {}, [E]));
                  break;
                case "BlockQuote":
                  n(o, "blockquote", p);
                  break;
                case "List":
                  var k = o.listStart;
                  null !== k && 1 !== k && (p.start = k.toString()), n(o, "Bullet" === o.listType ? "ul" : "ol", p);
                  break;
                case "Item":
                  n(o, "li", p);
                  break;
                case "HorizontalRule":
                  a(o, s("hr", p));
                  break;
                case "Document":
                  break;
                default:
                  throw new Error('Unknown node type "' + o.type + '"');
              }
        }
        return h.react.children;
      }
      function u(e) {
        var t = e || {};
        if (t.allowedTypes && t.disallowedTypes)
          throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");
        if (t.allowedTypes && !Array.isArray(t.allowedTypes))
          throw new Error("`allowedTypes` must be an array");
        if (t.disallowedTypes && !Array.isArray(t.disallowedTypes))
          throw new Error("`disallowedTypes` must be an array");
        if (t.allowNode && "function" != typeof t.allowNode)
          throw new Error("`allowNode` must be a function");
        var r = t.allowedTypes || c;
        return t.disallowedTypes && (r = r.filter(function(e) {
          return -1 === t.disallowedTypes.indexOf(e);
        })), {
          sourcePos: t.sourcePos,
          softBreak: t.softBreak || "\n",
          escapeHtml: Boolean(t.escapeHtml),
          skipHtml: Boolean(t.skipHtml),
          allowNode: t.allowNode,
          allowedTypes: r,
          render: o
        };
      }
      var l = r(2),
          c = ["Html", "HtmlBlock", "Text", "Paragraph", "Header", "Softbreak", "Hardbreak", "Link", "Image", "Emph", "Code", "CodeBlock", "BlockQuote", "List", "Item", "Strong", "HorizontalRule", "Document"];
      e.exports = u;
    }, function(e, t, r) {
      "use strict";
      function n(e) {
        return {
          doc: new V,
          blocks: H,
          blockStarts: O,
          tip: this.doc,
          oldtip: this.doc,
          currentLine: "",
          lineNumber: 0,
          offset: 0,
          column: 0,
          nextNonspace: 0,
          nextNonspaceColumn: 0,
          indent: 0,
          indented: !1,
          blank: !1,
          allClosed: !0,
          lastMatchedContainer: this.doc,
          refmap: {},
          lastLineLength: 0,
          inlineParser: new f(e),
          findNextNonspace: U,
          advanceOffset: P,
          advanceNextNonspace: I,
          breakOutOfLists: T,
          addLine: B,
          addChild: N,
          incorporateLine: M,
          finalize: j,
          processInlines: z,
          closeUnmatchedBlocks: R,
          parse: G,
          options: e || {}
        };
      }
      var i = r(3),
          a = r(1).unescapeString,
          s = r(1).OPENTAG,
          o = r(1).CLOSETAG,
          u = 4,
          l = 10,
          c = 62,
          p = 60,
          h = 32,
          d = 91,
          f = r(16),
          m = [/./, /^<(?:script|pre|style)(?:\s|>|$)/i, /^<!--/, /^<[?]/, /^<![A-Z]/, /^<!\[CDATA\[/, /^<[\/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|title|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|[\/]?[>]|$)/i, new RegExp("^(?:" + s + "|" + o + ")s*$", "i")],
          g = [/./, /<\/(?:script|pre|style)>/i, /-->/, /\?>/, />/, /\]\]>/],
          b = /^(?:(?:\* *){3,}|(?:_ *){3,}|(?:- *){3,}) *$/,
          v = /^[#`~*+_=<>0-9-]/,
          C = /[^ \t\f\v\r\n]/,
          E = /^[*+-]( +|$)/,
          k = /^(\d{1,9})([.)])( +|$)/,
          A = /^#{1,6}(?: +|$)/,
          w = /^`{3,}(?!.*`)|^~{3,}(?!.*~)/,
          y = /^(?:`{3,}|~{3,})(?= *$)/,
          x = /^(?:=+|-+) *$/,
          _ = /\r\n|\n|\r/,
          L = function(e) {
            return !C.test(e);
          },
          q = function(e, t) {
            return t < e.length ? e.charCodeAt(t) : -1;
          },
          D = function(e) {
            for (; e; ) {
              if (e._lastLineBlank)
                return !0;
              var t = e.type;
              if ("List" !== t && "Item" !== t)
                break;
              e = e._lastChild;
            }
            return !1;
          },
          T = function(e) {
            var t = e,
                r = null;
            do
              "List" === t.type && (r = t), t = t._parent;
 while (t);
            if (r) {
              for (; e !== r; )
                this.finalize(e, this.lineNumber), e = e._parent;
              this.finalize(r, this.lineNumber), this.tip = r._parent;
            }
          },
          B = function() {
            this.tip._string_content += this.currentLine.slice(this.offset) + "\n";
          },
          N = function(e, t) {
            for (; !this.blocks[this.tip.type].canContain(e); )
              this.finalize(this.tip, this.lineNumber - 1);
            var r = t + 1,
                n = new i(e, [[this.lineNumber, r], [0, 0]]);
            return n._string_content = "", this.tip.appendChild(n), this.tip = n, n;
          },
          S = function(e, t, r) {
            var n,
                i,
                a = e.slice(t),
                s = {
                  type: null,
                  tight: !0,
                  bulletChar: null,
                  start: null,
                  delimiter: null,
                  padding: null,
                  markerOffset: r
                };
            if (n = a.match(E))
              i = n[1].length, s.type = "Bullet", s.bulletChar = n[0][0];
            else {
              if (!(n = a.match(k)))
                return null;
              i = n[3].length, s.type = "Ordered", s.start = parseInt(n[1]), s.delimiter = n[2];
            }
            var o = n[0].length === a.length;
            return i >= 5 || 1 > i || o ? s.padding = n[0].length - i + 1 : s.padding = n[0].length, s;
          },
          F = function(e, t) {
            return e.type === t.type && e.delimiter === t.delimiter && e.bulletChar === t.bulletChar;
          },
          R = function() {
            if (!this.allClosed) {
              for (; this.oldtip !== this.lastMatchedContainer; ) {
                var e = this.oldtip._parent;
                this.finalize(this.oldtip, this.lineNumber - 1), this.oldtip = e;
              }
              this.allClosed = !0;
            }
          },
          H = {
            Document: {
              "continue": function() {
                return 0;
              },
              finalize: function() {},
              canContain: function(e) {
                return "Item" !== e;
              },
              acceptsLines: !1
            },
            List: {
              "continue": function() {
                return 0;
              },
              finalize: function(e, t) {
                for (var r = t._firstChild; r; ) {
                  if (D(r) && r._next) {
                    t._listData.tight = !1;
                    break;
                  }
                  for (var n = r._firstChild; n; ) {
                    if (D(n) && (r._next || n._next)) {
                      t._listData.tight = !1;
                      break;
                    }
                    n = n._next;
                  }
                  r = r._next;
                }
              },
              canContain: function(e) {
                return "Item" === e;
              },
              acceptsLines: !1
            },
            BlockQuote: {
              "continue": function(e) {
                var t = e.currentLine;
                return e.indented || q(t, e.nextNonspace) !== c ? 1 : (e.advanceNextNonspace(), e.advanceOffset(1, !1), q(t, e.offset) === h && e.offset++, 0);
              },
              finalize: function() {},
              canContain: function(e) {
                return "Item" !== e;
              },
              acceptsLines: !1
            },
            Item: {
              "continue": function(e, t) {
                if (e.blank && null !== t._firstChild)
                  e.advanceNextNonspace();
                else {
                  if (!(e.indent >= t._listData.markerOffset + t._listData.padding))
                    return 1;
                  e.advanceOffset(t._listData.markerOffset + t._listData.padding, !0);
                }
                return 0;
              },
              finalize: function() {},
              canContain: function(e) {
                return "Item" !== e;
              },
              acceptsLines: !1
            },
            Header: {
              "continue": function() {
                return 1;
              },
              finalize: function() {},
              canContain: function() {
                return !1;
              },
              acceptsLines: !1
            },
            HorizontalRule: {
              "continue": function() {
                return 1;
              },
              finalize: function() {},
              canContain: function() {
                return !1;
              },
              acceptsLines: !1
            },
            CodeBlock: {
              "continue": function(e, t) {
                var r = e.currentLine,
                    n = e.indent;
                if (t._isFenced) {
                  var i = 3 >= n && r.charAt(e.nextNonspace) === t._fenceChar && r.slice(e.nextNonspace).match(y);
                  if (i && i[0].length >= t._fenceLength)
                    return e.finalize(t, e.lineNumber), 2;
                  for (var a = t._fenceOffset; a > 0 && q(r, e.offset) === h; )
                    e.advanceOffset(1, !1), a--;
                } else if (n >= u)
                  e.advanceOffset(u, !0);
                else {
                  if (!e.blank)
                    return 1;
                  e.advanceNextNonspace();
                }
                return 0;
              },
              finalize: function(e, t) {
                if (t._isFenced) {
                  var r = t._string_content,
                      n = r.indexOf("\n"),
                      i = r.slice(0, n),
                      s = r.slice(n + 1);
                  t.info = a(i.trim()), t._literal = s;
                } else
                  t._literal = t._string_content.replace(/(\n *)+$/, "\n");
                t._string_content = null;
              },
              canContain: function() {
                return !1;
              },
              acceptsLines: !0
            },
            HtmlBlock: {
              "continue": function(e, t) {
                return !e.blank || 6 !== t._htmlBlockType && 7 !== t._htmlBlockType ? 0 : 1;
              },
              finalize: function(e, t) {
                t._literal = t._string_content.replace(/(\n *)+$/, ""), t._string_content = null;
              },
              canContain: function() {
                return !1;
              },
              acceptsLines: !0
            },
            Paragraph: {
              "continue": function(e) {
                return e.blank ? 1 : 0;
              },
              finalize: function(e, t) {
                for (var r,
                    n = !1; q(t._string_content, 0) === d && (r = e.inlineParser.parseReference(t._string_content, e.refmap)); )
                  t._string_content = t._string_content.slice(r), n = !0;
                n && L(t._string_content) && t.unlink();
              },
              canContain: function() {
                return !1;
              },
              acceptsLines: !0
            }
          },
          O = [function(e) {
            return e.indented || q(e.currentLine, e.nextNonspace) !== c ? 0 : (e.advanceNextNonspace(), e.advanceOffset(1, !1), q(e.currentLine, e.offset) === h && e.advanceOffset(1, !1), e.closeUnmatchedBlocks(), e.addChild("BlockQuote", e.nextNonspace), 1);
          }, function(e) {
            var t;
            if (!e.indented && (t = e.currentLine.slice(e.nextNonspace).match(A))) {
              e.advanceNextNonspace(), e.advanceOffset(t[0].length, !1), e.closeUnmatchedBlocks();
              var r = e.addChild("Header", e.nextNonspace);
              return r.level = t[0].trim().length, r._string_content = e.currentLine.slice(e.offset).replace(/^ *#+ *$/, "").replace(/ +#+ *$/, ""), e.advanceOffset(e.currentLine.length - e.offset), 2;
            }
            return 0;
          }, function(e) {
            var t;
            if (!e.indented && (t = e.currentLine.slice(e.nextNonspace).match(w))) {
              var r = t[0].length;
              e.closeUnmatchedBlocks();
              var n = e.addChild("CodeBlock", e.nextNonspace);
              return n._isFenced = !0, n._fenceLength = r, n._fenceChar = t[0][0], n._fenceOffset = e.indent, e.advanceNextNonspace(), e.advanceOffset(r, !1), 2;
            }
            return 0;
          }, function(e, t) {
            if (!e.indented && q(e.currentLine, e.nextNonspace) === p) {
              var r,
                  n = e.currentLine.slice(e.nextNonspace);
              for (r = 1; 7 >= r; r++)
                if (m[r].test(n) && (7 > r || "Paragraph" !== t.type)) {
                  e.closeUnmatchedBlocks();
                  var i = e.addChild("HtmlBlock", e.offset);
                  return i._htmlBlockType = r, 2;
                }
            }
            return 0;
          }, function(e, t) {
            var r;
            if (!e.indented && "Paragraph" === t.type && t._string_content.indexOf("\n") === t._string_content.length - 1 && (r = e.currentLine.slice(e.nextNonspace).match(x))) {
              e.closeUnmatchedBlocks();
              var n = new i("Header", t.sourcepos);
              return n.level = "=" === r[0][0] ? 1 : 2, n._string_content = t._string_content, t.insertAfter(n), t.unlink(), e.tip = n, e.advanceOffset(e.currentLine.length - e.offset, !1), 2;
            }
            return 0;
          }, function(e) {
            return !e.indented && b.test(e.currentLine.slice(e.nextNonspace)) ? (e.closeUnmatchedBlocks(), e.addChild("HorizontalRule", e.nextNonspace), e.advanceOffset(e.currentLine.length - e.offset, !1), 2) : 0;
          }, function(e, t) {
            var r,
                n;
            return !(r = S(e.currentLine, e.nextNonspace, e.indent)) || e.indented && "List" !== t.type ? 0 : (e.closeUnmatchedBlocks(), e.advanceNextNonspace(), n = e.column, e.advanceOffset(r.padding, !1), r.padding = e.column - n, "List" === e.tip.type && F(t._listData, r) || (t = e.addChild("List", e.nextNonspace), t._listData = r), t = e.addChild("Item", e.nextNonspace), t._listData = r, 1);
          }, function(e) {
            return e.indented && "Paragraph" !== e.tip.type && !e.blank ? (e.advanceOffset(u, !0), e.closeUnmatchedBlocks(), e.addChild("CodeBlock", e.offset), 2) : 0;
          }],
          P = function(e, t) {
            for (var r = 0,
                n = 0,
                i = this.currentLine; t ? e > n : e > r; )
              n += "	" === i[this.offset + r] ? 4 - (this.column + n) % 4 : 1, r++;
            this.offset += r, this.column += n;
          },
          I = function() {
            this.offset = this.nextNonspace, this.column = this.nextNonspaceColumn;
          },
          U = function() {
            for (var e,
                t = this.currentLine,
                r = this.offset,
                n = this.column; "" !== (e = t.charAt(r)); )
              if (" " === e)
                r++, n++;
              else {
                if ("	" !== e)
                  break;
                r++, n += 4 - n % 4;
              }
            this.blank = "\n" === e || "\r" === e || "" === e, this.nextNonspace = r, this.nextNonspaceColumn = n, this.indent = this.nextNonspaceColumn - this.column, this.indented = this.indent >= u;
          },
          M = function(e) {
            var t,
                r = !0,
                n = this.doc;
            this.oldtip = this.tip, this.offset = 0, this.lineNumber += 1, -1 !== e.indexOf("\x00") && (e = e.replace(/\0/g, "ÔøΩ")), this.currentLine = e;
            for (var i; (i = n._lastChild) && i._open; ) {
              switch (n = i, this.findNextNonspace(), this.blocks[n.type]["continue"](this, n)) {
                case 0:
                  break;
                case 1:
                  r = !1;
                  break;
                case 2:
                  return void(this.lastLineLength = e.length);
                default:
                  throw "continue returned illegal value, must be 0, 1, or 2";
              }
              if (!r) {
                n = n._parent;
                break;
              }
            }
            this.allClosed = n === this.oldtip, this.lastMatchedContainer = n, this.blank && n._lastLineBlank && this.breakOutOfLists(n);
            for (var a = "Paragraph" !== n.type && H[n.type].acceptsLines,
                s = this.blockStarts,
                o = s.length; !a; ) {
              if (this.findNextNonspace(), !this.indented && !v.test(e.slice(this.nextNonspace))) {
                this.advanceNextNonspace();
                break;
              }
              for (var u = 0; o > u; ) {
                var l = s[u](this, n);
                if (1 === l) {
                  n = this.tip;
                  break;
                }
                if (2 === l) {
                  n = this.tip, a = !0;
                  break;
                }
                u++;
              }
              if (u === o) {
                this.advanceNextNonspace();
                break;
              }
            }
            if (this.allClosed || this.blank || "Paragraph" !== this.tip.type) {
              this.closeUnmatchedBlocks(), this.blank && n.lastChild && (n.lastChild._lastLineBlank = !0), t = n.type;
              for (var c = this.blank && !("BlockQuote" === t || "CodeBlock" === t && n._isFenced || "Item" === t && !n._firstChild && n.sourcepos[0][0] === this.lineNumber),
                  p = n; p; )
                p._lastLineBlank = c, p = p._parent;
              this.blocks[t].acceptsLines ? (this.addLine(), "HtmlBlock" === t && n._htmlBlockType >= 1 && n._htmlBlockType <= 5 && g[n._htmlBlockType].test(this.currentLine.slice(this.offset)) && this.finalize(n, this.lineNumber)) : this.offset < e.length && !this.blank && (n = this.addChild("Paragraph", this.offset), this.advanceNextNonspace(), this.addLine());
            } else
              this.addLine();
            this.lastLineLength = e.length;
          },
          j = function(e, t) {
            var r = e._parent;
            e._open = !1, e.sourcepos[1] = [t, this.lastLineLength], this.blocks[e.type].finalize(this, e), this.tip = r;
          },
          z = function(e) {
            var t,
                r,
                n,
                i = e.walker();
            for (this.inlineParser.refmap = this.refmap, this.inlineParser.options = this.options; r = i.next(); )
              t = r.node, n = t.type, r.entering || "Paragraph" !== n && "Header" !== n || this.inlineParser.parse(t);
          },
          V = function() {
            var e = new i("Document", [[1, 1], [0, 0]]);
            return e;
          },
          G = function(e) {
            this.doc = new V, this.tip = this.doc, this.refmap = {}, this.lineNumber = 0, this.lastLineLength = 0, this.offset = 0, this.column = 0, this.lastMatchedContainer = this.doc, this.currentLine = "", this.options.time && console.time("preparing input");
            var t = e.split(_),
                r = t.length;
            e.charCodeAt(e.length - 1) === l && (r -= 1), this.options.time && console.timeEnd("preparing input"), this.options.time && console.time("block parsing");
            for (var n = 0; r > n; n++)
              this.incorporateLine(t[n]);
            for (; this.tip; )
              this.finalize(this.tip, r);
            return this.options.time && console.timeEnd("block parsing"), this.options.time && console.time("inline parsing"), this.processInlines(this.doc), this.options.time && console.timeEnd("inline parsing"), this.doc;
          };
      e.exports = n;
    }, function(e, t) {
      "use strict";
      if (String.fromCodePoint)
        e.exports = function(e) {
          try {
            return String.fromCodePoint(e);
          } catch (t) {
            if (t instanceof RangeError)
              return String.fromCharCode(65533);
            throw t;
          }
        };
      else {
        var r = String.fromCharCode,
            n = Math.floor,
            i = function() {
              var e,
                  t,
                  i = 16384,
                  a = [],
                  s = -1,
                  o = arguments.length;
              if (!o)
                return "";
              for (var u = ""; ++s < o; ) {
                var l = Number(arguments[s]);
                if (!isFinite(l) || 0 > l || l > 1114111 || n(l) !== l)
                  return String.fromCharCode(65533);
                65535 >= l ? a.push(l) : (l -= 65536, e = (l >> 10) + 55296, t = l % 1024 + 56320, a.push(e, t)), (s + 1 === o || a.length > i) && (u += r.apply(null, a), a.length = 0);
              }
              return u;
            };
        e.exports = i;
      }
    }, function(e, t, r) {
      "use strict";
      function n(e) {
        return {
          softbreak: "\n",
          escape: i,
          options: e || {},
          render: c
        };
      }
      var i = r(1).escapeXml,
          a = function(e, t, r) {
            var n = "<" + e;
            if (t && t.length > 0)
              for (var i,
                  a = 0; void 0 !== (i = t[a]); )
                n += " " + i[0] + '="' + i[1] + '"', a++;
            return r && (n += " /"), n += ">";
          },
          s = /\<[^>]*\>/,
          o = /^javascript:|vbscript:|file:|data:/i,
          u = /^data:image\/(?:png|gif|jpeg|webp)/i,
          l = function(e) {
            return o.test(e) && !u.test(e);
          },
          c = function(e) {
            var t,
                r,
                n,
                i,
                o,
                u,
                c,
                p = e.walker(),
                h = "",
                d = "\n",
                f = 0,
                m = function(e) {
                  h += f > 0 ? e.replace(s, "") : e, d = e;
                },
                g = this.escape,
                b = function() {
                  "\n" !== d && (h += "\n", d = "\n");
                },
                v = this.options;
            for (v.time && console.time("rendering"); i = p.next(); ) {
              if (u = i.entering, o = i.node, t = [], v.sourcepos) {
                var C = o.sourcepos;
                C && t.push(["data-sourcepos", String(C[0][0]) + ":" + String(C[0][1]) + "-" + String(C[1][0]) + ":" + String(C[1][1])]);
              }
              switch (o.type) {
                case "Text":
                  m(g(o.literal, !1));
                  break;
                case "Softbreak":
                  m(this.softbreak);
                  break;
                case "Hardbreak":
                  m(a("br", [], !0)), b();
                  break;
                case "Emph":
                  m(a(u ? "em" : "/em"));
                  break;
                case "Strong":
                  m(a(u ? "strong" : "/strong"));
                  break;
                case "Html":
                  m(v.safe ? "<!-- raw HTML omitted -->" : o.literal);
                  break;
                case "Link":
                  u ? (v.safe && l(o.destination) || t.push(["href", g(o.destination, !0)]), o.title && t.push(["title", g(o.title, !0)]), m(a("a", t))) : m(a("/a"));
                  break;
                case "Image":
                  u ? (0 === f && m(v.safe && l(o.destination) ? '<img src="" alt="' : '<img src="' + g(o.destination, !0) + '" alt="'), f += 1) : (f -= 1, 0 === f && (o.title && m('" title="' + g(o.title, !0)), m('" />')));
                  break;
                case "Code":
                  m(a("code") + g(o.literal, !1) + a("/code"));
                  break;
                case "Document":
                  break;
                case "Paragraph":
                  if (c = o.parent.parent, null !== c && "List" === c.type && c.listTight)
                    break;
                  u ? (b(), m(a("p", t))) : (m(a("/p")), b());
                  break;
                case "BlockQuote":
                  u ? (b(), m(a("blockquote", t)), b()) : (b(), m(a("/blockquote")), b());
                  break;
                case "Item":
                  u ? m(a("li", t)) : (m(a("/li")), b());
                  break;
                case "List":
                  if (n = "Bullet" === o.listType ? "ul" : "ol", u) {
                    var E = o.listStart;
                    null !== E && 1 !== E && t.push(["start", E.toString()]), b(), m(a(n, t)), b();
                  } else
                    b(), m(a("/" + n)), b();
                  break;
                case "Header":
                  n = "h" + o.level, u ? (b(), m(a(n, t))) : (m(a("/" + n)), b());
                  break;
                case "CodeBlock":
                  r = o.info ? o.info.split(/\s+/) : [], r.length > 0 && r[0].length > 0 && t.push(["class", "language-" + g(r[0], !0)]), b(), m(a("pre") + a("code", t)), m(g(o.literal, !1)), m(a("/code") + a("/pre")), b();
                  break;
                case "HtmlBlock":
                  b(), m(v.safe ? "<!-- raw HTML omitted -->" : o.literal), b();
                  break;
                case "HorizontalRule":
                  b(), m(a("hr", t, !0)), b();
                  break;
                default:
                  throw "Unknown node type " + o.type;
              }
            }
            return v.time && console.timeEnd("rendering"), h;
          };
      e.exports = n;
    }, function(e, t, r) {
      "use strict";
      e.exports.Node = r(3), e.exports.Parser = r(12), e.exports.HtmlRenderer = r(14), e.exports.XmlRenderer = r(18);
    }, function(e, t, r) {
      "use strict";
      function n(e) {
        return {
          subject: "",
          delimiters: null,
          pos: 0,
          refmap: {},
          match: W,
          peek: ee,
          spnl: te,
          parseBackticks: re,
          parseBackslash: ne,
          parseAutolink: ie,
          parseHtmlTag: ae,
          scanDelims: se,
          handleDelim: oe,
          parseLinkTitle: pe,
          parseLinkDestination: he,
          parseLinkLabel: de,
          parseOpenBracket: fe,
          parseCloseBracket: ge,
          parseBang: me,
          parseEntity: be,
          parseString: ve,
          parseNewline: Ce,
          parseReference: Ee,
          parseInline: ke,
          processEmphasis: ce,
          removeDelimiter: ue,
          options: e || {},
          parse: Ae
        };
      }
      var i = r(3),
          a = r(1),
          s = r(17),
          o = a.normalizeURI,
          u = a.unescapeString,
          l = r(13),
          c = r(4).decodeHTML;
      r(26);
      var p = 10,
          h = 42,
          d = 95,
          f = 96,
          m = 91,
          g = 93,
          b = 60,
          v = 33,
          C = 92,
          E = 38,
          k = 40,
          A = 41,
          w = 58,
          y = 39,
          x = 34,
          _ = a.ESCAPABLE,
          L = "\\\\" + _,
          q = "[^\\\\()\\x00-\\x20]",
          D = "\\((" + q + "|" + L + "|\\\\)*\\)",
          T = a.ENTITY,
          B = a.reHtmlTag,
          N = new RegExp(/^[\u2000-\u206F\u2E00-\u2E7F\\'!"#\$%&\(\)\*\+,\-\.\/:;<=>\?@\[\]\^_`\{\|\}~]/),
          S = new RegExp('^(?:"(' + L + '|[^"\\x00])*"|\'(' + L + "|[^'\\x00])*'|\\((" + L + "|[^)\\x00])*\\))"),
          F = new RegExp("^(?:[<](?:[^<>\\n\\\\\\x00]|" + L + "|\\\\)*[>])"),
          R = new RegExp("^(?:" + q + "+|" + L + "|\\\\|" + D + ")*"),
          H = new RegExp("^" + _),
          O = new RegExp("^" + T, "i"),
          P = /`+/,
          I = /^`+/,
          U = /\.\.\./g,
          M = /--+/g,
          j = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,
          z = /^<(?:coap|doi|javascript|aaa|aaas|about|acap|cap|cid|crid|data|dav|dict|dns|file|ftp|geo|go|gopher|h323|http|https|iax|icap|im|imap|info|ipp|iris|iris.beep|iris.xpc|iris.xpcs|iris.lwz|ldap|mailto|mid|msrp|msrps|mtqp|mupdate|news|nfs|ni|nih|nntp|opaquelocktoken|pop|pres|rtsp|service|session|shttp|sieve|sip|sips|sms|snmp|soap.beep|soap.beeps|tag|tel|telnet|tftp|thismessage|tn3270|tip|tv|urn|vemmi|ws|wss|xcon|xcon-userid|xmlrpc.beep|xmlrpc.beeps|xmpp|z39.50r|z39.50s|adiumxtra|afp|afs|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|chrome|chrome-extension|com-eventbrite-attendee|content|cvs|dlna-playsingle|dlna-playcontainer|dtn|dvb|ed2k|facetime|feed|finger|fish|gg|git|gizmoproject|gtalk|hcp|icon|ipn|irc|irc6|ircs|itms|jar|jms|keyparc|lastfm|ldaps|magnet|maps|market|message|mms|ms-help|msnim|mumble|mvn|notes|oid|palm|paparazzi|platform|proxy|psyc|query|res|resource|rmi|rsync|rtmp|secondlife|sftp|sgn|skype|smb|soldat|spotify|ssh|steam|svn|teamspeak|things|udp|unreal|ut2004|ventrilo|view-source|webcal|wtai|wyciwyg|xfire|xri|ymsgr):[^<>\x00-\x20]*>/i,
          V = /^ *(?:\n *)?/,
          G = /^\s/,
          Z = /\s+/g,
          $ = / *$/,
          X = /^ */,
          Y = /^ *(?:\n|$)/,
          Q = new RegExp("^\\[(?:[^\\\\\\[\\]]|" + L + "|\\\\){0,1000}\\]"),
          J = /^[^\n`\[\]\\!<&*_'"]+/m,
          K = function(e) {
            var t = new i("Text");
            return t._literal = e, t;
          },
          W = function(e) {
            var t = e.exec(this.subject.slice(this.pos));
            return null === t ? null : (this.pos += t.index + t[0].length, t[0]);
          },
          ee = function() {
            return this.pos < this.subject.length ? this.subject.charCodeAt(this.pos) : -1;
          },
          te = function() {
            return this.match(V), !0;
          },
          re = function(e) {
            var t = this.match(I);
            if (null === t)
              return !1;
            for (var r,
                n,
                a = this.pos; null !== (r = this.match(P)); )
              if (r === t)
                return n = new i("Code"), n._literal = this.subject.slice(a, this.pos - t.length).trim().replace(Z, " "), e.appendChild(n), !0;
            return this.pos = a, e.appendChild(K(t)), !0;
          },
          ne = function(e) {
            var t,
                r = this.subject;
            return this.pos += 1, this.peek() === p ? (this.pos += 1, t = new i("Hardbreak"), e.appendChild(t)) : H.test(r.charAt(this.pos)) ? (e.appendChild(K(r.charAt(this.pos))), this.pos += 1) : e.appendChild(K("\\")), !0;
          },
          ie = function(e) {
            var t,
                r,
                n;
            return (t = this.match(j)) ? (r = t.slice(1, t.length - 1), n = new i("Link"), n._destination = o("mailto:" + r), n._title = "", n.appendChild(K(r)), e.appendChild(n), !0) : (t = this.match(z)) ? (r = t.slice(1, t.length - 1), n = new i("Link"), n._destination = o(r), n._title = "", n.appendChild(K(r)), e.appendChild(n), !0) : !1;
          },
          ae = function(e) {
            var t = this.match(B);
            if (null === t)
              return !1;
            var r = new i("Html");
            return r._literal = t, e.appendChild(r), !0;
          },
          se = function(e) {
            var t,
                r,
                n,
                i,
                a,
                s,
                o,
                u,
                c,
                p,
                h,
                f = 0,
                m = this.pos;
            if (e === y || e === x)
              f++, this.pos++;
            else
              for (; this.peek() === e; )
                f++, this.pos++;
            return 0 === f ? null : (t = 0 === m ? "\n" : this.subject.charAt(m - 1), n = this.peek(), r = -1 === n ? "\n" : l(n), u = G.test(r), c = N.test(r), p = G.test(t), h = N.test(t), i = !(u || c && !p && !h), a = !(p || h && !u && !c), e === d ? (s = i && (!a || h), o = a && (!i || c)) : e === y || e === x ? (s = i && !a, o = a) : (s = i, o = a), this.pos = m, {
              numdelims: f,
              can_open: s,
              can_close: o
            });
          },
          oe = function(e, t) {
            var r = this.scanDelims(e);
            if (!r)
              return !1;
            var n,
                i = r.numdelims,
                a = this.pos;
            this.pos += i, n = e === y ? "‚Äô" : e === x ? "‚Äú" : this.subject.slice(a, this.pos);
            var s = K(n);
            return t.appendChild(s), this.delimiters = {
              cc: e,
              numdelims: i,
              node: s,
              previous: this.delimiters,
              next: null,
              can_open: r.can_open,
              can_close: r.can_close,
              active: !0
            }, null !== this.delimiters.previous && (this.delimiters.previous.next = this.delimiters), !0;
          },
          ue = function(e) {
            null !== e.previous && (e.previous.next = e.next), null === e.next ? this.delimiters = e.previous : e.next.previous = e.previous;
          },
          le = function(e, t) {
            e.next !== t && (e.next = t, t.previous = e);
          },
          ce = function(e) {
            var t,
                r,
                n,
                a,
                s,
                o,
                u,
                l,
                c,
                p,
                f = [];
            for (f[d] = e, f[h] = e, f[y] = e, f[x] = e, r = this.delimiters; null !== r && r.previous !== e; )
              r = r.previous;
            for (; null !== r; ) {
              var m = r.cc;
              if (!r.can_close || m !== d && m !== h && m !== y && m !== x)
                r = r.next;
              else {
                for (t = r.previous, p = !1; null !== t && t !== e && t !== f[m]; ) {
                  if (t.cc === r.cc && t.can_open) {
                    p = !0;
                    break;
                  }
                  t = t.previous;
                }
                if (n = r, m === h || m === d)
                  if (p) {
                    u = r.numdelims < 3 || t.numdelims < 3 ? r.numdelims <= t.numdelims ? r.numdelims : t.numdelims : r.numdelims % 2 === 0 ? 2 : 1, a = t.node, s = r.node, t.numdelims -= u, r.numdelims -= u, a._literal = a._literal.slice(0, a._literal.length - u), s._literal = s._literal.slice(0, s._literal.length - u);
                    var g = new i(1 === u ? "Emph" : "Strong");
                    for (l = a._next; l && l !== s; )
                      c = l._next, l.unlink(), g.appendChild(l), l = c;
                    a.insertAfter(g), le(t, r), 0 === t.numdelims && (a.unlink(), this.removeDelimiter(t)), 0 === r.numdelims && (s.unlink(), o = r.next, this.removeDelimiter(r), r = o);
                  } else
                    r = r.next;
                else
                  m === y ? (r.node._literal = "‚Äô", p && (t.node._literal = "‚Äò"), r = r.next) : m === x && (r.node._literal = "‚Äù", p && (t.node.literal = "‚Äú"), r = r.next);
                p || (f[m] = n.previous, n.can_open || this.removeDelimiter(n));
              }
            }
            for (; null !== this.delimiters && this.delimiters !== e; )
              this.removeDelimiter(this.delimiters);
          },
          pe = function() {
            var e = this.match(S);
            return null === e ? null : u(e.substr(1, e.length - 2));
          },
          he = function() {
            var e = this.match(F);
            return null === e ? (e = this.match(R), null === e ? null : o(u(e))) : o(u(e.substr(1, e.length - 2)));
          },
          de = function() {
            var e = this.match(Q);
            return null === e || e.length > 1001 ? 0 : e.length;
          },
          fe = function(e) {
            var t = this.pos;
            this.pos += 1;
            var r = K("[");
            return e.appendChild(r), this.delimiters = {
              cc: m,
              numdelims: 1,
              node: r,
              previous: this.delimiters,
              next: null,
              can_open: !0,
              can_close: !1,
              index: t,
              active: !0
            }, null !== this.delimiters.previous && (this.delimiters.previous.next = this.delimiters), !0;
          },
          me = function(e) {
            var t = this.pos;
            if (this.pos += 1, this.peek() === m) {
              this.pos += 1;
              var r = K("![");
              e.appendChild(r), this.delimiters = {
                cc: v,
                numdelims: 1,
                node: r,
                previous: this.delimiters,
                next: null,
                can_open: !0,
                can_close: !1,
                index: t + 1,
                active: !0
              }, null !== this.delimiters.previous && (this.delimiters.previous.next = this.delimiters);
            } else
              e.appendChild(K("!"));
            return !0;
          },
          ge = function(e) {
            var t,
                r,
                n,
                a,
                o,
                u,
                l = !1;
            for (this.pos += 1, t = this.pos, u = this.delimiters; null !== u && u.cc !== m && u.cc !== v; )
              u = u.previous;
            if (null === u)
              return e.appendChild(K("]")), !0;
            if (!u.active)
              return e.appendChild(K("]")), this.removeDelimiter(u), !0;
            if (r = u.cc === v, this.peek() === k)
              this.pos++, this.spnl() && null !== (n = this.parseLinkDestination()) && this.spnl() && (G.test(this.subject.charAt(this.pos - 1)) && (a = this.parseLinkTitle()), !0) && this.spnl() && this.peek() === A && (this.pos += 1, l = !0);
            else {
              var c = this.pos;
              this.spnl();
              var p = this.pos,
                  h = this.parseLinkLabel();
              o = 0 === h || 2 === h ? this.subject.slice(u.index, t) : this.subject.slice(p, p + h), 0 === h && (this.pos = c);
              var d = this.refmap[s(o)];
              d && (n = d.destination, a = d.title, l = !0);
            }
            if (l) {
              var f = new i(r ? "Image" : "Link");
              f._destination = n, f._title = a || "";
              var g,
                  b;
              for (g = u.node._next; g; )
                b = g._next, g.unlink(), f.appendChild(g), g = b;
              if (e.appendChild(f), this.processEmphasis(u.previous), u.node.unlink(), !r)
                for (u = this.delimiters; null !== u; )
                  u.cc === m && (u.active = !1), u = u.previous;
              return !0;
            }
            return this.removeDelimiter(u), this.pos = t, e.appendChild(K("]")), !0;
          },
          be = function(e) {
            var t;
            return (t = this.match(O)) ? (e.appendChild(K(c(t))), !0) : !1;
          },
          ve = function(e) {
            var t;
            return (t = this.match(J)) ? (this.options.smart ? e.appendChild(K(t.replace(U, "‚Ä¶").replace(M, function(e) {
              var t = 0,
                  r = 0;
              return e.length % 3 === 0 ? r = e.length / 3 : e.length % 2 === 0 ? t = e.length / 2 : e.length % 3 === 2 ? (t = 1, r = (e.length - 2) / 3) : (t = 2, r = (e.length - 4) / 3), "‚Äî".repeat(r) + "‚Äì".repeat(t);
            }))) : e.appendChild(K(t)), !0) : !1;
          },
          Ce = function(e) {
            this.pos += 1;
            var t = e._lastChild;
            if (t && "Text" === t.type && " " === t._literal[t._literal.length - 1]) {
              var r = " " === t._literal[t._literal.length - 2];
              t._literal = t._literal.replace($, ""), e.appendChild(new i(r ? "Hardbreak" : "Softbreak"));
            } else
              e.appendChild(new i("Softbreak"));
            return this.match(X), !0;
          },
          Ee = function(e, t) {
            this.subject = e, this.pos = 0;
            var r,
                n,
                i,
                a,
                o = this.pos;
            if (a = this.parseLinkLabel(), 0 === a)
              return 0;
            if (r = this.subject.substr(0, a), this.peek() !== w)
              return this.pos = o, 0;
            if (this.pos++, this.spnl(), n = this.parseLinkDestination(), null === n || 0 === n.length)
              return this.pos = o, 0;
            var u = this.pos;
            this.spnl(), i = this.parseLinkTitle(), null === i && (i = "", this.pos = u);
            var l = !0;
            if (null === this.match(Y) && ("" === i ? l = !1 : (i = "", this.pos = u, l = null !== this.match(Y))), !l)
              return this.pos = o, 0;
            var c = s(r);
            return "" === c ? (this.pos = o, 0) : (t[c] || (t[c] = {
              destination: n,
              title: i
            }), this.pos - o);
          },
          ke = function(e) {
            var t = !1,
                r = this.peek();
            if (-1 === r)
              return !1;
            switch (r) {
              case p:
                t = this.parseNewline(e);
                break;
              case C:
                t = this.parseBackslash(e);
                break;
              case f:
                t = this.parseBackticks(e);
                break;
              case h:
              case d:
                t = this.handleDelim(r, e);
                break;
              case y:
              case x:
                t = this.options.smart && this.handleDelim(r, e);
                break;
              case m:
                t = this.parseOpenBracket(e);
                break;
              case v:
                t = this.parseBang(e);
                break;
              case g:
                t = this.parseCloseBracket(e);
                break;
              case b:
                t = this.parseAutolink(e) || this.parseHtmlTag(e);
                break;
              case E:
                t = this.parseEntity(e);
                break;
              default:
                t = this.parseString(e);
            }
            return t || (this.pos += 1, e.appendChild(K(l(r)))), !0;
          },
          Ae = function(e) {
            for (this.subject = e._string_content.trim(), this.pos = 0, this.delimiters = null; this.parseInline(e); )
              ;
            e._string_content = null, this.processEmphasis(null);
          };
      e.exports = n;
    }, function(e, t) {
      "use strict";
      var r = /[ \t\r\n]+|[A-Z\xB5\xC0-\xD6\xD8-\xDF\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u0149\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u017F\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C5\u01C7\u01C8\u01CA\u01CB\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F0-\u01F2\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0345\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03AB\u03B0\u03C2\u03CF-\u03D1\u03D5\u03D6\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F0\u03F1\u03F4\u03F5\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u0587\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E96-\u1E9B\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F50\u1F52\u1F54\u1F56\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1F80-\u1FAF\u1FB2-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD2\u1FD3\u1FD6-\u1FDB\u1FE2-\u1FE4\u1FE6-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2126\u212A\u212B\u2132\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0\uA7B1\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27]|\uD806[\uDCA0-\uDCBF]/g,
          n = {
            A: "a",
            B: "b",
            C: "c",
            D: "d",
            E: "e",
            F: "f",
            G: "g",
            H: "h",
            I: "i",
            J: "j",
            K: "k",
            L: "l",
            M: "m",
            N: "n",
            O: "o",
            P: "p",
            Q: "q",
            R: "r",
            S: "s",
            T: "t",
            U: "u",
            V: "v",
            W: "w",
            X: "x",
            Y: "y",
            Z: "z",
            "¬µ": "Œº",
            "√Ä": "√†",
            "√Å": "√°",
            "√Ç": "√¢",
            "√É": "√£",
            "√Ñ": "√§",
            "√Ö": "√•",
            "√Ü": "√¶",
            "√á": "√ß",
            "√à": "√®",
            "√â": "√©",
            "√ä": "√™",
            "√ã": "√´",
            "√å": "√¨",
            "√ç": "√≠",
            "√é": "√Æ",
            "√è": "√Ø",
            "√ê": "√∞",
            "√ë": "√±",
            "√í": "√≤",
            "√ì": "√≥",
            "√î": "√¥",
            "√ï": "√µ",
            "√ñ": "√∂",
            "√ò": "√∏",
            "√ô": "√π",
            "√ö": "√∫",
            "√õ": "√ª",
            "√ú": "√º",
            "√ù": "√Ω",
            "√û": "√æ",
            "ƒÄ": "ƒÅ",
            "ƒÇ": "ƒÉ",
            "ƒÑ": "ƒÖ",
            "ƒÜ": "ƒá",
            "ƒà": "ƒâ",
            "ƒä": "ƒã",
            "ƒå": "ƒç",
            "ƒé": "ƒè",
            "ƒê": "ƒë",
            "ƒí": "ƒì",
            "ƒî": "ƒï",
            "ƒñ": "ƒó",
            "ƒò": "ƒô",
            "ƒö": "ƒõ",
            "ƒú": "ƒù",
            "ƒû": "ƒü",
            "ƒ†": "ƒ°",
            "ƒ¢": "ƒ£",
            "ƒ§": "ƒ•",
            "ƒ¶": "ƒß",
            "ƒ®": "ƒ©",
            "ƒ™": "ƒ´",
            "ƒ¨": "ƒ≠",
            "ƒÆ": "ƒØ",
            "ƒ≤": "ƒ≥",
            "ƒ¥": "ƒµ",
            "ƒ∂": "ƒ∑",
            "ƒπ": "ƒ∫",
            "ƒª": "ƒº",
            "ƒΩ": "ƒæ",
            "ƒø": "≈Ä",
            "≈Å": "≈Ç",
            "≈É": "≈Ñ",
            "≈Ö": "≈Ü",
            "≈á": "≈à",
            "≈ä": "≈ã",
            "≈å": "≈ç",
            "≈é": "≈è",
            "≈ê": "≈ë",
            "≈í": "≈ì",
            "≈î": "≈ï",
            "≈ñ": "≈ó",
            "≈ò": "≈ô",
            "≈ö": "≈õ",
            "≈ú": "≈ù",
            "≈û": "≈ü",
            "≈†": "≈°",
            "≈¢": "≈£",
            "≈§": "≈•",
            "≈¶": "≈ß",
            "≈®": "≈©",
            "≈™": "≈´",
            "≈¨": "≈≠",
            "≈Æ": "≈Ø",
            "≈∞": "≈±",
            "≈≤": "≈≥",
            "≈¥": "≈µ",
            "≈∂": "≈∑",
            "≈∏": "√ø",
            "≈π": "≈∫",
            "≈ª": "≈º",
            "≈Ω": "≈æ",
            "≈ø": "s",
            "∆Å": "…ì",
            "∆Ç": "∆É",
            "∆Ñ": "∆Ö",
            "∆Ü": "…î",
            "∆á": "∆à",
            "∆â": "…ñ",
            "∆ä": "…ó",
            "∆ã": "∆å",
            "∆é": "«ù",
            "∆è": "…ô",
            "∆ê": "…õ",
            "∆ë": "∆í",
            "∆ì": "…†",
            "∆î": "…£",
            "∆ñ": "…©",
            "∆ó": "…®",
            "∆ò": "∆ô",
            "∆ú": "…Ø",
            "∆ù": "…≤",
            "∆ü": "…µ",
            "∆†": "∆°",
            "∆¢": "∆£",
            "∆§": "∆•",
            "∆¶": " Ä",
            "∆ß": "∆®",
            "∆©": " É",
            "∆¨": "∆≠",
            "∆Æ": " à",
            "∆Ø": "∆∞",
            "∆±": " ä",
            "∆≤": " ã",
            "∆≥": "∆¥",
            "∆µ": "∆∂",
            "∆∑": " í",
            "∆∏": "∆π",
            "∆º": "∆Ω",
            "«Ñ": "«Ü",
            "«Ö": "«Ü",
            "«á": "«â",
            "«à": "«â",
            "«ä": "«å",
            "«ã": "«å",
            "«ç": "«é",
            "«è": "«ê",
            "«ë": "«í",
            "«ì": "«î",
            "«ï": "«ñ",
            "«ó": "«ò",
            "«ô": "«ö",
            "«õ": "«ú",
            "«û": "«ü",
            "«†": "«°",
            "«¢": "«£",
            "«§": "«•",
            "«¶": "«ß",
            "«®": "«©",
            "«™": "«´",
            "«¨": "«≠",
            "«Æ": "«Ø",
            "«±": "«≥",
            "«≤": "«≥",
            "«¥": "«µ",
            "«∂": "∆ï",
            "«∑": "∆ø",
            "«∏": "«π",
            "«∫": "«ª",
            "«º": "«Ω",
            "«æ": "«ø",
            "»Ä": "»Å",
            "»Ç": "»É",
            "»Ñ": "»Ö",
            "»Ü": "»á",
            "»à": "»â",
            "»ä": "»ã",
            "»å": "»ç",
            "»é": "»è",
            "»ê": "»ë",
            "»í": "»ì",
            "»î": "»ï",
            "»ñ": "»ó",
            "»ò": "»ô",
            "»ö": "»õ",
            "»ú": "»ù",
            "»û": "»ü",
            "»†": "∆û",
            "»¢": "»£",
            "»§": "»•",
            "»¶": "»ß",
            "»®": "»©",
            "»™": "»´",
            "»¨": "»≠",
            "»Æ": "»Ø",
            "»∞": "»±",
            "»≤": "»≥",
            "»∫": "‚±•",
            "»ª": "»º",
            "»Ω": "∆ö",
            "»æ": "‚±¶",
            "…Å": "…Ç",
            "…É": "∆Ä",
            "…Ñ": " â",
            "…Ö": " å",
            "…Ü": "…á",
            "…à": "…â",
            "…ä": "…ã",
            "…å": "…ç",
            "…é": "…è",
            "ÕÖ": "Œπ",
            "Õ∞": "Õ±",
            "Õ≤": "Õ≥",
            "Õ∂": "Õ∑",
            "Õø": "œ≥",
            "ŒÜ": "Œ¨",
            "Œà": "Œ≠",
            "Œâ": "ŒÆ",
            "Œä": "ŒØ",
            "Œå": "œå",
            "Œé": "œç",
            "Œè": "œé",
            "Œë": "Œ±",
            "Œí": "Œ≤",
            "Œì": "Œ≥",
            "Œî": "Œ¥",
            "Œï": "Œµ",
            "Œñ": "Œ∂",
            "Œó": "Œ∑",
            "Œò": "Œ∏",
            "Œô": "Œπ",
            "Œö": "Œ∫",
            "Œõ": "Œª",
            "Œú": "Œº",
            "Œù": "ŒΩ",
            "Œû": "Œæ",
            "Œü": "Œø",
            "Œ†": "œÄ",
            "Œ°": "œÅ",
            "Œ£": "œÉ",
            "Œ§": "œÑ",
            "Œ•": "œÖ",
            "Œ¶": "œÜ",
            "Œß": "œá",
            "Œ®": "œà",
            "Œ©": "œâ",
            "Œ™": "œä",
            "Œ´": "œã",
            "œÇ": "œÉ",
            "œè": "œó",
            "œê": "Œ≤",
            "œë": "Œ∏",
            "œï": "œÜ",
            "œñ": "œÄ",
            "œò": "œô",
            "œö": "œõ",
            "œú": "œù",
            "œû": "œü",
            "œ†": "œ°",
            "œ¢": "œ£",
            "œ§": "œ•",
            "œ¶": "œß",
            "œ®": "œ©",
            "œ™": "œ´",
            "œ¨": "œ≠",
            "œÆ": "œØ",
            "œ∞": "Œ∫",
            "œ±": "œÅ",
            "œ¥": "Œ∏",
            "œµ": "Œµ",
            "œ∑": "œ∏",
            "œπ": "œ≤",
            "œ∫": "œª",
            "œΩ": "Õª",
            "œæ": "Õº",
            "œø": "ÕΩ",
            "–Ä": "—ê",
            "–Å": "—ë",
            "–Ç": "—í",
            "–É": "—ì",
            "–Ñ": "—î",
            "–Ö": "—ï",
            "–Ü": "—ñ",
            "–á": "—ó",
            "–à": "—ò",
            "–â": "—ô",
            "–ä": "—ö",
            "–ã": "—õ",
            "–å": "—ú",
            "–ç": "—ù",
            "–é": "—û",
            "–è": "—ü",
            "–ê": "–∞",
            "–ë": "–±",
            "–í": "–≤",
            "–ì": "–≥",
            "–î": "–¥",
            "–ï": "–µ",
            "–ñ": "–∂",
            "–ó": "–∑",
            "–ò": "–∏",
            "–ô": "–π",
            "–ö": "–∫",
            "–õ": "–ª",
            "–ú": "–º",
            "–ù": "–Ω",
            "–û": "–æ",
            "–ü": "–ø",
            "–†": "—Ä",
            "–°": "—Å",
            "–¢": "—Ç",
            "–£": "—É",
            "–§": "—Ñ",
            "–•": "—Ö",
            "–¶": "—Ü",
            "–ß": "—á",
            "–®": "—à",
            "–©": "—â",
            "–™": "—ä",
            "–´": "—ã",
            "–¨": "—å",
            "–≠": "—ç",
            "–Æ": "—é",
            "–Ø": "—è",
            "—†": "—°",
            "—¢": "—£",
            "—§": "—•",
            "—¶": "—ß",
            "—®": "—©",
            "—™": "—´",
            "—¨": "—≠",
            "—Æ": "—Ø",
            "—∞": "—±",
            "—≤": "—≥",
            "—¥": "—µ",
            "—∂": "—∑",
            "—∏": "—π",
            "—∫": "—ª",
            "—º": "—Ω",
            "—æ": "—ø",
            "“Ä": "“Å",
            "“ä": "“ã",
            "“å": "“ç",
            "“é": "“è",
            "“ê": "“ë",
            "“í": "“ì",
            "“î": "“ï",
            "“ñ": "“ó",
            "“ò": "“ô",
            "“ö": "“õ",
            "“ú": "“ù",
            "“û": "“ü",
            "“†": "“°",
            "“¢": "“£",
            "“§": "“•",
            "“¶": "“ß",
            "“®": "“©",
            "“™": "“´",
            "“¨": "“≠",
            "“Æ": "“Ø",
            "“∞": "“±",
            "“≤": "“≥",
            "“¥": "“µ",
            "“∂": "“∑",
            "“∏": "“π",
            "“∫": "“ª",
            "“º": "“Ω",
            "“æ": "“ø",
            "”Ä": "”è",
            "”Å": "”Ç",
            "”É": "”Ñ",
            "”Ö": "”Ü",
            "”á": "”à",
            "”â": "”ä",
            "”ã": "”å",
            "”ç": "”é",
            "”ê": "”ë",
            "”í": "”ì",
            "”î": "”ï",
            "”ñ": "”ó",
            "”ò": "”ô",
            "”ö": "”õ",
            "”ú": "”ù",
            "”û": "”ü",
            "”†": "”°",
            "”¢": "”£",
            "”§": "”•",
            "”¶": "”ß",
            "”®": "”©",
            "”™": "”´",
            "”¨": "”≠",
            "”Æ": "”Ø",
            "”∞": "”±",
            "”≤": "”≥",
            "”¥": "”µ",
            "”∂": "”∑",
            "”∏": "”π",
            "”∫": "”ª",
            "”º": "”Ω",
            "”æ": "”ø",
            "‘Ä": "‘Å",
            "‘Ç": "‘É",
            "‘Ñ": "‘Ö",
            "‘Ü": "‘á",
            "‘à": "‘â",
            "‘ä": "‘ã",
            "‘å": "‘ç",
            "‘é": "‘è",
            "‘ê": "‘ë",
            "‘í": "‘ì",
            "‘î": "‘ï",
            "‘ñ": "‘ó",
            "‘ò": "‘ô",
            "‘ö": "‘õ",
            "‘ú": "‘ù",
            "‘û": "‘ü",
            "‘†": "‘°",
            "‘¢": "‘£",
            "‘§": "‘•",
            "‘¶": "‘ß",
            "‘®": "‘©",
            "‘™": "‘´",
            "‘¨": "‘≠",
            "‘Æ": "‘Ø",
            "‘±": "’°",
            "‘≤": "’¢",
            "‘≥": "’£",
            "‘¥": "’§",
            "‘µ": "’•",
            "‘∂": "’¶",
            "‘∑": "’ß",
            "‘∏": "’®",
            "‘π": "’©",
            "‘∫": "’™",
            "‘ª": "’´",
            "‘º": "’¨",
            "‘Ω": "’≠",
            "‘æ": "’Æ",
            "‘ø": "’Ø",
            "’Ä": "’∞",
            "’Å": "’±",
            "’Ç": "’≤",
            "’É": "’≥",
            "’Ñ": "’¥",
            "’Ö": "’µ",
            "’Ü": "’∂",
            "’á": "’∑",
            "’à": "’∏",
            "’â": "’π",
            "’ä": "’∫",
            "’ã": "’ª",
            "’å": "’º",
            "’ç": "’Ω",
            "’é": "’æ",
            "’è": "’ø",
            "’ê": "÷Ä",
            "’ë": "÷Å",
            "’í": "÷Ç",
            "’ì": "÷É",
            "’î": "÷Ñ",
            "’ï": "÷Ö",
            "’ñ": "÷Ü",
            "·Ç†": "‚¥Ä",
            "·Ç°": "‚¥Å",
            "·Ç¢": "‚¥Ç",
            "·Ç£": "‚¥É",
            "·Ç§": "‚¥Ñ",
            "·Ç•": "‚¥Ö",
            "·Ç¶": "‚¥Ü",
            "·Çß": "‚¥á",
            "·Ç®": "‚¥à",
            "·Ç©": "‚¥â",
            "·Ç™": "‚¥ä",
            "·Ç´": "‚¥ã",
            "·Ç¨": "‚¥å",
            "·Ç≠": "‚¥ç",
            "·ÇÆ": "‚¥é",
            "·ÇØ": "‚¥è",
            "·Ç∞": "‚¥ê",
            "·Ç±": "‚¥ë",
            "·Ç≤": "‚¥í",
            "·Ç≥": "‚¥ì",
            "·Ç¥": "‚¥î",
            "·Çµ": "‚¥ï",
            "·Ç∂": "‚¥ñ",
            "·Ç∑": "‚¥ó",
            "·Ç∏": "‚¥ò",
            "·Çπ": "‚¥ô",
            "·Ç∫": "‚¥ö",
            "·Çª": "‚¥õ",
            "·Çº": "‚¥ú",
            "·ÇΩ": "‚¥ù",
            "·Çæ": "‚¥û",
            "·Çø": "‚¥ü",
            "·ÉÄ": "‚¥†",
            "·ÉÅ": "‚¥°",
            "·ÉÇ": "‚¥¢",
            "·ÉÉ": "‚¥£",
            "·ÉÑ": "‚¥§",
            "·ÉÖ": "‚¥•",
            "·Éá": "‚¥ß",
            "·Éç": "‚¥≠",
            "·∏Ä": "·∏Å",
            "·∏Ç": "·∏É",
            "·∏Ñ": "·∏Ö",
            "·∏Ü": "·∏á",
            "·∏à": "·∏â",
            "·∏ä": "·∏ã",
            "·∏å": "·∏ç",
            "·∏é": "·∏è",
            "·∏ê": "·∏ë",
            "·∏í": "·∏ì",
            "·∏î": "·∏ï",
            "·∏ñ": "·∏ó",
            "·∏ò": "·∏ô",
            "·∏ö": "·∏õ",
            "·∏ú": "·∏ù",
            "·∏û": "·∏ü",
            "·∏†": "·∏°",
            "·∏¢": "·∏£",
            "·∏§": "·∏•",
            "·∏¶": "·∏ß",
            "·∏®": "·∏©",
            "·∏™": "·∏´",
            "·∏¨": "·∏≠",
            "·∏Æ": "·∏Ø",
            "·∏∞": "·∏±",
            "·∏≤": "·∏≥",
            "·∏¥": "·∏µ",
            "·∏∂": "·∏∑",
            "·∏∏": "·∏π",
            "·∏∫": "·∏ª",
            "·∏º": "·∏Ω",
            "·∏æ": "·∏ø",
            "·πÄ": "·πÅ",
            "·πÇ": "·πÉ",
            "·πÑ": "·πÖ",
            "·πÜ": "·πá",
            "·πà": "·πâ",
            "·πä": "·πã",
            "·πå": "·πç",
            "·πé": "·πè",
            "·πê": "·πë",
            "·πí": "·πì",
            "·πî": "·πï",
            "·πñ": "·πó",
            "·πò": "·πô",
            "·πö": "·πõ",
            "·πú": "·πù",
            "·πû": "·πü",
            "·π†": "·π°",
            "·π¢": "·π£",
            "·π§": "·π•",
            "·π¶": "·πß",
            "·π®": "·π©",
            "·π™": "·π´",
            "·π¨": "·π≠",
            "·πÆ": "·πØ",
            "·π∞": "·π±",
            "·π≤": "·π≥",
            "·π¥": "·πµ",
            "·π∂": "·π∑",
            "·π∏": "·ππ",
            "·π∫": "·πª",
            "·πº": "·πΩ",
            "·πæ": "·πø",
            "·∫Ä": "·∫Å",
            "·∫Ç": "·∫É",
            "·∫Ñ": "·∫Ö",
            "·∫Ü": "·∫á",
            "·∫à": "·∫â",
            "·∫ä": "·∫ã",
            "·∫å": "·∫ç",
            "·∫é": "·∫è",
            "·∫ê": "·∫ë",
            "·∫í": "·∫ì",
            "·∫î": "·∫ï",
            "·∫õ": "·π°",
            "·∫†": "·∫°",
            "·∫¢": "·∫£",
            "·∫§": "·∫•",
            "·∫¶": "·∫ß",
            "·∫®": "·∫©",
            "·∫™": "·∫´",
            "·∫¨": "·∫≠",
            "·∫Æ": "·∫Ø",
            "·∫∞": "·∫±",
            "·∫≤": "·∫≥",
            "·∫¥": "·∫µ",
            "·∫∂": "·∫∑",
            "·∫∏": "·∫π",
            "·∫∫": "·∫ª",
            "·∫º": "·∫Ω",
            "·∫æ": "·∫ø",
            "·ªÄ": "·ªÅ",
            "·ªÇ": "·ªÉ",
            "·ªÑ": "·ªÖ",
            "·ªÜ": "·ªá",
            "·ªà": "·ªâ",
            "·ªä": "·ªã",
            "·ªå": "·ªç",
            "·ªé": "·ªè",
            "·ªê": "·ªë",
            "·ªí": "·ªì",
            "·ªî": "·ªï",
            "·ªñ": "·ªó",
            "·ªò": "·ªô",
            "·ªö": "·ªõ",
            "·ªú": "·ªù",
            "·ªû": "·ªü",
            "·ª†": "·ª°",
            "·ª¢": "·ª£",
            "·ª§": "·ª•",
            "·ª¶": "·ªß",
            "·ª®": "·ª©",
            "·ª™": "·ª´",
            "·ª¨": "·ª≠",
            "·ªÆ": "·ªØ",
            "·ª∞": "·ª±",
            "·ª≤": "·ª≥",
            "·ª¥": "·ªµ",
            "·ª∂": "·ª∑",
            "·ª∏": "·ªπ",
            "·ª∫": "·ªª",
            "·ªº": "·ªΩ",
            "·ªæ": "·ªø",
            "·ºà": "·ºÄ",
            "·ºâ": "·ºÅ",
            "·ºä": "·ºÇ",
            "·ºã": "·ºÉ",
            "·ºå": "·ºÑ",
            "·ºç": "·ºÖ",
            "·ºé": "·ºÜ",
            "·ºè": "·ºá",
            "·ºò": "·ºê",
            "·ºô": "·ºë",
            "·ºö": "·ºí",
            "·ºõ": "·ºì",
            "·ºú": "·ºî",
            "·ºù": "·ºï",
            "·º®": "·º†",
            "·º©": "·º°",
            "·º™": "·º¢",
            "·º´": "·º£",
            "·º¨": "·º§",
            "·º≠": "·º•",
            "·ºÆ": "·º¶",
            "·ºØ": "·ºß",
            "·º∏": "·º∞",
            "·ºπ": "·º±",
            "·º∫": "·º≤",
            "·ºª": "·º≥",
            "·ºº": "·º¥",
            "·ºΩ": "·ºµ",
            "·ºæ": "·º∂",
            "·ºø": "·º∑",
            "·Ωà": "·ΩÄ",
            "·Ωâ": "·ΩÅ",
            "·Ωä": "·ΩÇ",
            "·Ωã": "·ΩÉ",
            "·Ωå": "·ΩÑ",
            "·Ωç": "·ΩÖ",
            "·Ωô": "·Ωë",
            "·Ωõ": "·Ωì",
            "·Ωù": "·Ωï",
            "·Ωü": "·Ωó",
            "·Ω®": "·Ω†",
            "·Ω©": "·Ω°",
            "·Ω™": "·Ω¢",
            "·Ω´": "·Ω£",
            "·Ω¨": "·Ω§",
            "·Ω≠": "·Ω•",
            "·ΩÆ": "·Ω¶",
            "·ΩØ": "·Ωß",
            "·æ∏": "·æ∞",
            "·æπ": "·æ±",
            "·æ∫": "·Ω∞",
            "·æª": "·Ω±",
            "·ææ": "Œπ",
            "·øà": "·Ω≤",
            "·øâ": "·Ω≥",
            "·øä": "·Ω¥",
            "·øã": "·Ωµ",
            "·øò": "·øê",
            "·øô": "·øë",
            "·øö": "·Ω∂",
            "·øõ": "·Ω∑",
            "·ø®": "·ø†",
            "·ø©": "·ø°",
            "·ø™": "·Ω∫",
            "·ø´": "·Ωª",
            "·ø¨": "·ø•",
            "·ø∏": "·Ω∏",
            "·øπ": "·Ωπ",
            "·ø∫": "·Ωº",
            "·øª": "·ΩΩ",
            "‚Ñ¶": "œâ",
            "‚Ñ™": "k",
            "‚Ñ´": "√•",
            "‚Ñ≤": "‚Öé",
            "‚Ö†": "‚Ö∞",
            "‚Ö°": "‚Ö±",
            "‚Ö¢": "‚Ö≤",
            "‚Ö£": "‚Ö≥",
            "‚Ö§": "‚Ö¥",
            "‚Ö•": "‚Öµ",
            "‚Ö¶": "‚Ö∂",
            "‚Öß": "‚Ö∑",
            "‚Ö®": "‚Ö∏",
            "‚Ö©": "‚Öπ",
            "‚Ö™": "‚Ö∫",
            "‚Ö´": "‚Öª",
            "‚Ö¨": "‚Öº",
            "‚Ö≠": "‚ÖΩ",
            "‚ÖÆ": "‚Öæ",
            "‚ÖØ": "‚Öø",
            "‚ÜÉ": "‚ÜÑ",
            "‚í∂": "‚ìê",
            "‚í∑": "‚ìë",
            "‚í∏": "‚ìí",
            "‚íπ": "‚ìì",
            "‚í∫": "‚ìî",
            "‚íª": "‚ìï",
            "‚íº": "‚ìñ",
            "‚íΩ": "‚ìó",
            "‚íæ": "‚ìò",
            "‚íø": "‚ìô",
            "‚ìÄ": "‚ìö",
            "‚ìÅ": "‚ìõ",
            "‚ìÇ": "‚ìú",
            "‚ìÉ": "‚ìù",
            "‚ìÑ": "‚ìû",
            "‚ìÖ": "‚ìü",
            "‚ìÜ": "‚ì†",
            "‚ìá": "‚ì°",
            "‚ìà": "‚ì¢",
            "‚ìâ": "‚ì£",
            "‚ìä": "‚ì§",
            "‚ìã": "‚ì•",
            "‚ìå": "‚ì¶",
            "‚ìç": "‚ìß",
            "‚ìé": "‚ì®",
            "‚ìè": "‚ì©",
            "‚∞Ä": "‚∞∞",
            "‚∞Å": "‚∞±",
            "‚∞Ç": "‚∞≤",
            "‚∞É": "‚∞≥",
            "‚∞Ñ": "‚∞¥",
            "‚∞Ö": "‚∞µ",
            "‚∞Ü": "‚∞∂",
            "‚∞á": "‚∞∑",
            "‚∞à": "‚∞∏",
            "‚∞â": "‚∞π",
            "‚∞ä": "‚∞∫",
            "‚∞ã": "‚∞ª",
            "‚∞å": "‚∞º",
            "‚∞ç": "‚∞Ω",
            "‚∞é": "‚∞æ",
            "‚∞è": "‚∞ø",
            "‚∞ê": "‚±Ä",
            "‚∞ë": "‚±Å",
            "‚∞í": "‚±Ç",
            "‚∞ì": "‚±É",
            "‚∞î": "‚±Ñ",
            "‚∞ï": "‚±Ö",
            "‚∞ñ": "‚±Ü",
            "‚∞ó": "‚±á",
            "‚∞ò": "‚±à",
            "‚∞ô": "‚±â",
            "‚∞ö": "‚±ä",
            "‚∞õ": "‚±ã",
            "‚∞ú": "‚±å",
            "‚∞ù": "‚±ç",
            "‚∞û": "‚±é",
            "‚∞ü": "‚±è",
            "‚∞†": "‚±ê",
            "‚∞°": "‚±ë",
            "‚∞¢": "‚±í",
            "‚∞£": "‚±ì",
            "‚∞§": "‚±î",
            "‚∞•": "‚±ï",
            "‚∞¶": "‚±ñ",
            "‚∞ß": "‚±ó",
            "‚∞®": "‚±ò",
            "‚∞©": "‚±ô",
            "‚∞™": "‚±ö",
            "‚∞´": "‚±õ",
            "‚∞¨": "‚±ú",
            "‚∞≠": "‚±ù",
            "‚∞Æ": "‚±û",
            "‚±†": "‚±°",
            "‚±¢": "…´",
            "‚±£": "·µΩ",
            "‚±§": "…Ω",
            "‚±ß": "‚±®",
            "‚±©": "‚±™",
            "‚±´": "‚±¨",
            "‚±≠": "…ë",
            "‚±Æ": "…±",
            "‚±Ø": "…ê",
            "‚±∞": "…í",
            "‚±≤": "‚±≥",
            "‚±µ": "‚±∂",
            "‚±æ": "»ø",
            "‚±ø": "…Ä",
            "‚≤Ä": "‚≤Å",
            "‚≤Ç": "‚≤É",
            "‚≤Ñ": "‚≤Ö",
            "‚≤Ü": "‚≤á",
            "‚≤à": "‚≤â",
            "‚≤ä": "‚≤ã",
            "‚≤å": "‚≤ç",
            "‚≤é": "‚≤è",
            "‚≤ê": "‚≤ë",
            "‚≤í": "‚≤ì",
            "‚≤î": "‚≤ï",
            "‚≤ñ": "‚≤ó",
            "‚≤ò": "‚≤ô",
            "‚≤ö": "‚≤õ",
            "‚≤ú": "‚≤ù",
            "‚≤û": "‚≤ü",
            "‚≤†": "‚≤°",
            "‚≤¢": "‚≤£",
            "‚≤§": "‚≤•",
            "‚≤¶": "‚≤ß",
            "‚≤®": "‚≤©",
            "‚≤™": "‚≤´",
            "‚≤¨": "‚≤≠",
            "‚≤Æ": "‚≤Ø",
            "‚≤∞": "‚≤±",
            "‚≤≤": "‚≤≥",
            "‚≤¥": "‚≤µ",
            "‚≤∂": "‚≤∑",
            "‚≤∏": "‚≤π",
            "‚≤∫": "‚≤ª",
            "‚≤º": "‚≤Ω",
            "‚≤æ": "‚≤ø",
            "‚≥Ä": "‚≥Å",
            "‚≥Ç": "‚≥É",
            "‚≥Ñ": "‚≥Ö",
            "‚≥Ü": "‚≥á",
            "‚≥à": "‚≥â",
            "‚≥ä": "‚≥ã",
            "‚≥å": "‚≥ç",
            "‚≥é": "‚≥è",
            "‚≥ê": "‚≥ë",
            "‚≥í": "‚≥ì",
            "‚≥î": "‚≥ï",
            "‚≥ñ": "‚≥ó",
            "‚≥ò": "‚≥ô",
            "‚≥ö": "‚≥õ",
            "‚≥ú": "‚≥ù",
            "‚≥û": "‚≥ü",
            "‚≥†": "‚≥°",
            "‚≥¢": "‚≥£",
            "‚≥´": "‚≥¨",
            "‚≥≠": "‚≥Æ",
            "‚≥≤": "‚≥≥",
            "ÍôÄ": "ÍôÅ",
            "ÍôÇ": "ÍôÉ",
            "ÍôÑ": "ÍôÖ",
            "ÍôÜ": "Íôá",
            "Íôà": "Íôâ",
            "Íôä": "Íôã",
            "Íôå": "Íôç",
            "Íôé": "Íôè",
            "Íôê": "Íôë",
            "Íôí": "Íôì",
            "Íôî": "Íôï",
            "Íôñ": "Íôó",
            "Íôò": "Íôô",
            "Íôö": "Íôõ",
            "Íôú": "Íôù",
            "Íôû": "Íôü",
            "Íô†": "Íô°",
            "Íô¢": "Íô£",
            "Íô§": "Íô•",
            "Íô¶": "Íôß",
            "Íô®": "Íô©",
            "Íô™": "Íô´",
            "Íô¨": "Íô≠",
            "ÍöÄ": "ÍöÅ",
            "ÍöÇ": "ÍöÉ",
            "ÍöÑ": "ÍöÖ",
            "ÍöÜ": "Íöá",
            "Íöà": "Íöâ",
            "Íöä": "Íöã",
            "Íöå": "Íöç",
            "Íöé": "Íöè",
            "Íöê": "Íöë",
            "Íöí": "Íöì",
            "Íöî": "Íöï",
            "Íöñ": "Íöó",
            "Íöò": "Íöô",
            "Íöö": "Íöõ",
            "Íú¢": "Íú£",
            "Íú§": "Íú•",
            "Íú¶": "Íúß",
            "Íú®": "Íú©",
            "Íú™": "Íú´",
            "Íú¨": "Íú≠",
            "ÍúÆ": "ÍúØ",
            "Íú≤": "Íú≥",
            "Íú¥": "Íúµ",
            "Íú∂": "Íú∑",
            "Íú∏": "Íúπ",
            "Íú∫": "Íúª",
            "Íúº": "ÍúΩ",
            "Íúæ": "Íúø",
            "ÍùÄ": "ÍùÅ",
            "ÍùÇ": "ÍùÉ",
            "ÍùÑ": "ÍùÖ",
            "ÍùÜ": "Íùá",
            "Íùà": "Íùâ",
            "Íùä": "Íùã",
            "Íùå": "Íùç",
            "Íùé": "Íùè",
            "Íùê": "Íùë",
            "Íùí": "Íùì",
            "Íùî": "Íùï",
            "Íùñ": "Íùó",
            "Íùò": "Íùô",
            "Íùö": "Íùõ",
            "Íùú": "Íùù",
            "Íùû": "Íùü",
            "Íù†": "Íù°",
            "Íù¢": "Íù£",
            "Íù§": "Íù•",
            "Íù¶": "Íùß",
            "Íù®": "Íù©",
            "Íù™": "Íù´",
            "Íù¨": "Íù≠",
            "ÍùÆ": "ÍùØ",
            "Íùπ": "Íù∫",
            "Íùª": "Íùº",
            "ÍùΩ": "·µπ",
            "Íùæ": "Íùø",
            "ÍûÄ": "ÍûÅ",
            "ÍûÇ": "ÍûÉ",
            "ÍûÑ": "ÍûÖ",
            "ÍûÜ": "Íûá",
            "Íûã": "Íûå",
            "Íûç": "…•",
            "Íûê": "Íûë",
            "Íûí": "Íûì",
            "Íûñ": "Íûó",
            "Íûò": "Íûô",
            "Íûö": "Íûõ",
            "Íûú": "Íûù",
            "Íûû": "Íûü",
            "Íû†": "Íû°",
            "Íû¢": "Íû£",
            "Íû§": "Íû•",
            "Íû¶": "Íûß",
            "Íû®": "Íû©",
            "Íû™": "…¶",
            "Íû´": "…ú",
            "Íû¨": "…°",
            "Íû≠": "…¨",
            "Íû∞": " û",
            "Íû±": " á",
            "Ôº°": "ÔΩÅ",
            "Ôº¢": "ÔΩÇ",
            "Ôº£": "ÔΩÉ",
            "Ôº§": "ÔΩÑ",
            "Ôº•": "ÔΩÖ",
            "Ôº¶": "ÔΩÜ",
            "Ôºß": "ÔΩá",
            "Ôº®": "ÔΩà",
            "Ôº©": "ÔΩâ",
            "Ôº™": "ÔΩä",
            "Ôº´": "ÔΩã",
            "Ôº¨": "ÔΩå",
            "Ôº≠": "ÔΩç",
            "ÔºÆ": "ÔΩé",
            "ÔºØ": "ÔΩè",
            "Ôº∞": "ÔΩê",
            "Ôº±": "ÔΩë",
            "Ôº≤": "ÔΩí",
            "Ôº≥": "ÔΩì",
            "Ôº¥": "ÔΩî",
            "Ôºµ": "ÔΩï",
            "Ôº∂": "ÔΩñ",
            "Ôº∑": "ÔΩó",
            "Ôº∏": "ÔΩò",
            "Ôºπ": "ÔΩô",
            "Ôº∫": "ÔΩö",
            "êêÄ": "êê®",
            "êêÅ": "êê©",
            "êêÇ": "êê™",
            "êêÉ": "êê´",
            "êêÑ": "êê¨",
            "êêÖ": "êê≠",
            "êêÜ": "êêÆ",
            "êêá": "êêØ",
            "êêà": "êê∞",
            "êêâ": "êê±",
            "êêä": "êê≤",
            "êêã": "êê≥",
            "êêå": "êê¥",
            "êêç": "êêµ",
            "êêé": "êê∂",
            "êêè": "êê∑",
            "êêê": "êê∏",
            "êêë": "êêπ",
            "êêí": "êê∫",
            "êêì": "êêª",
            "êêî": "êêº",
            "êêï": "êêΩ",
            "êêñ": "êêæ",
            "êêó": "êêø",
            "êêò": "êëÄ",
            "êêô": "êëÅ",
            "êêö": "êëÇ",
            "êêõ": "êëÉ",
            "êêú": "êëÑ",
            "êêù": "êëÖ",
            "êêû": "êëÜ",
            "êêü": "êëá",
            "êê†": "êëà",
            "êê°": "êëâ",
            "êê¢": "êëä",
            "êê£": "êëã",
            "êê§": "êëå",
            "êê•": "êëç",
            "êê¶": "êëé",
            "êêß": "êëè",
            "ë¢†": "ë£Ä",
            "ë¢°": "ë£Å",
            "ë¢¢": "ë£Ç",
            "ë¢£": "ë£É",
            "ë¢§": "ë£Ñ",
            "ë¢•": "ë£Ö",
            "ë¢¶": "ë£Ü",
            "ë¢ß": "ë£á",
            "ë¢®": "ë£à",
            "ë¢©": "ë£â",
            "ë¢™": "ë£ä",
            "ë¢´": "ë£ã",
            "ë¢¨": "ë£å",
            "ë¢≠": "ë£ç",
            "ë¢Æ": "ë£é",
            "ë¢Ø": "ë£è",
            "ë¢∞": "ë£ê",
            "ë¢±": "ë£ë",
            "ë¢≤": "ë£í",
            "ë¢≥": "ë£ì",
            "ë¢¥": "ë£î",
            "ë¢µ": "ë£ï",
            "ë¢∂": "ë£ñ",
            "ë¢∑": "ë£ó",
            "ë¢∏": "ë£ò",
            "ë¢π": "ë£ô",
            "ë¢∫": "ë£ö",
            "ë¢ª": "ë£õ",
            "ë¢º": "ë£ú",
            "ë¢Ω": "ë£ù",
            "ë¢æ": "ë£û",
            "ë¢ø": "ë£ü",
            "√ü": "ss",
            "ƒ∞": "iÃá",
            "≈â": " ºn",
            "«∞": "jÃå",
            "Œê": "ŒπÃàÃÅ",
            "Œ∞": "œÖÃàÃÅ",
            "÷á": "’•÷Ç",
            "·∫ñ": "hÃ±",
            "·∫ó": "tÃà",
            "·∫ò": "wÃä",
            "·∫ô": "yÃä",
            "·∫ö": "a æ",
            "·∫û": "ss",
            "·Ωê": "œÖÃì",
            "·Ωí": "œÖÃìÃÄ",
            "·Ωî": "œÖÃìÃÅ",
            "·Ωñ": "œÖÃìÕÇ",
            "·æÄ": "·ºÄŒπ",
            "·æÅ": "·ºÅŒπ",
            "·æÇ": "·ºÇŒπ",
            "·æÉ": "·ºÉŒπ",
            "·æÑ": "·ºÑŒπ",
            "·æÖ": "·ºÖŒπ",
            "·æÜ": "·ºÜŒπ",
            "·æá": "·ºáŒπ",
            "·æà": "·ºÄŒπ",
            "·æâ": "·ºÅŒπ",
            "·æä": "·ºÇŒπ",
            "·æã": "·ºÉŒπ",
            "·æå": "·ºÑŒπ",
            "·æç": "·ºÖŒπ",
            "·æé": "·ºÜŒπ",
            "·æè": "·ºáŒπ",
            "·æê": "·º†Œπ",
            "·æë": "·º°Œπ",
            "·æí": "·º¢Œπ",
            "·æì": "·º£Œπ",
            "·æî": "·º§Œπ",
            "·æï": "·º•Œπ",
            "·æñ": "·º¶Œπ",
            "·æó": "·ºßŒπ",
            "·æò": "·º†Œπ",
            "·æô": "·º°Œπ",
            "·æö": "·º¢Œπ",
            "·æõ": "·º£Œπ",
            "·æú": "·º§Œπ",
            "·æù": "·º•Œπ",
            "·æû": "·º¶Œπ",
            "·æü": "·ºßŒπ",
            "·æ†": "·Ω†Œπ",
            "·æ°": "·Ω°Œπ",
            "·æ¢": "·Ω¢Œπ",
            "·æ£": "·Ω£Œπ",
            "·æ§": "·Ω§Œπ",
            "·æ•": "·Ω•Œπ",
            "·æ¶": "·Ω¶Œπ",
            "·æß": "·ΩßŒπ",
            "·æ®": "·Ω†Œπ",
            "·æ©": "·Ω°Œπ",
            "·æ™": "·Ω¢Œπ",
            "·æ´": "·Ω£Œπ",
            "·æ¨": "·Ω§Œπ",
            "·æ≠": "·Ω•Œπ",
            "·æÆ": "·Ω¶Œπ",
            "·æØ": "·ΩßŒπ",
            "·æ≤": "·Ω∞Œπ",
            "·æ≥": "Œ±Œπ",
            "·æ¥": "Œ¨Œπ",
            "·æ∂": "Œ±ÕÇ",
            "·æ∑": "Œ±ÕÇŒπ",
            "·æº": "Œ±Œπ",
            "·øÇ": "·Ω¥Œπ",
            "·øÉ": "Œ∑Œπ",
            "·øÑ": "ŒÆŒπ",
            "·øÜ": "Œ∑ÕÇ",
            "·øá": "Œ∑ÕÇŒπ",
            "·øå": "Œ∑Œπ",
            "·øí": "ŒπÃàÃÄ",
            "·øì": "ŒπÃàÃÅ",
            "·øñ": "ŒπÕÇ",
            "·øó": "ŒπÃàÕÇ",
            "·ø¢": "œÖÃàÃÄ",
            "·ø£": "œÖÃàÃÅ",
            "·ø§": "œÅÃì",
            "·ø¶": "œÖÕÇ",
            "·øß": "œÖÃàÕÇ",
            "·ø≤": "·ΩºŒπ",
            "·ø≥": "œâŒπ",
            "·ø¥": "œéŒπ",
            "·ø∂": "œâÕÇ",
            "·ø∑": "œâÕÇŒπ",
            "·øº": "œâŒπ",
            "Ô¨Ä": "ff",
            "Ô¨Å": "fi",
            "Ô¨Ç": "fl",
            "Ô¨É": "ffi",
            "Ô¨Ñ": "ffl",
            "Ô¨Ö": "st",
            "Ô¨Ü": "st",
            "Ô¨ì": "’¥’∂",
            "Ô¨î": "’¥’•",
            "Ô¨ï": "’¥’´",
            "Ô¨ñ": "’æ’∂",
            "Ô¨ó": "’¥’≠"
          };
      e.exports = function(e) {
        return e.slice(1, e.length - 1).trim().replace(r, function(e) {
          return n[e] || " ";
        });
      };
    }, function(e, t, r) {
      "use strict";
      function n(e) {
        return {
          softbreak: "\n",
          escape: i,
          options: e || {},
          render: u
        };
      }
      var i = r(1).escapeXml,
          a = function(e, t, r) {
            var n = "<" + e;
            if (t && t.length > 0)
              for (var i,
                  a = 0; void 0 !== (i = t[a]); )
                n += " " + i[0] + '="' + i[1] + '"', a++;
            return r && (n += " /"), n += ">";
          },
          s = /\<[^>]*\>/,
          o = function(e) {
            return e.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
          },
          u = function(e) {
            var t,
                r,
                n,
                i,
                u,
                l,
                c,
                p,
                h,
                d = e.walker(),
                f = "",
                m = "\n",
                g = 0,
                b = 0,
                v = "  ",
                C = function(e) {
                  f += g > 0 ? e.replace(s, "") : e, m = e;
                },
                E = this.escape,
                k = function() {
                  if ("\n" !== m) {
                    f += "\n", m = "\n";
                    for (var e = b; e > 0; e--)
                      f += v;
                  }
                },
                A = this.options;
            for (A.time && console.time("rendering"), f += '<?xml version="1.0" encoding="UTF-8"?>\n', f += '<!DOCTYPE CommonMark SYSTEM "CommonMark.dtd">\n'; n = d.next(); )
              if (u = n.entering, i = n.node, h = i.type, c = i.isContainer, p = "HorizontalRule" === h || "Hardbreak" === h || "Softbreak" === h, l = "Html" === h || "HtmlInline" === h, r = o(h), u) {
                switch (t = [], h) {
                  case "List":
                    null !== i.listType && t.push(["type", i.listType.toLowerCase()]), null !== i.listStart && t.push(["start", String(i.listStart)]), null !== i.listTight && t.push(["tight", i.listTight ? "true" : "false"]);
                    var w = i.listDelimiter;
                    if (null !== w) {
                      var y = "";
                      y = "." === w ? "period" : "paren", t.push(["delimiter", y]);
                    }
                    break;
                  case "CodeBlock":
                    i.info && t.push(["info", i.info]);
                    break;
                  case "Header":
                    t.push(["level", String(i.level)]);
                    break;
                  case "Link":
                  case "Image":
                    t.push(["destination", i.destination]), t.push(["title", i.title]);
                }
                if (A.sourcepos) {
                  var x = i.sourcepos;
                  x && t.push(["sourcepos", String(x[0][0]) + ":" + String(x[0][1]) + "-" + String(x[1][0]) + ":" + String(x[1][1])]);
                }
                if (k(), C(a(r, t, p)), c)
                  b += 1;
                else if (!c && !p) {
                  var _ = i.literal;
                  _ && C(l ? _ : E(_)), C(a("/" + r));
                }
              } else
                b -= 1, k(), C(a("/" + r));
            return A.time && console.timeEnd("rendering"), f += "\n";
          };
      e.exports = n;
    }, function(e, t, r) {
      function n(e) {
        var t = Object.keys(e).join("|"),
            r = a(e);
        t += "|#[xX][\\da-fA-F]+|#\\d+";
        var n = new RegExp("&(?:" + t + ");", "g");
        return function(e) {
          return String(e).replace(n, r);
        };
      }
      function i(e, t) {
        return t > e ? 1 : -1;
      }
      function a(e) {
        return function(t) {
          return "#" === t.charAt(1) ? l("X" === t.charAt(2) || "x" === t.charAt(2) ? parseInt(t.substr(3), 16) : parseInt(t.substr(2), 10)) : e[t.slice(1, -1)];
        };
      }
      var s = r(5),
          o = r(23),
          u = r(6),
          l = r(20),
          c = n(u),
          p = n(s),
          h = function() {
            function e(e) {
              return ";" !== e.substr(-1) && (e += ";"), c(e);
            }
            for (var t = Object.keys(o).sort(i),
                r = Object.keys(s).sort(i),
                n = 0,
                u = 0; n < r.length; n++)
              t[u] === r[n] ? (r[n] += ";?", u++) : r[n] += ";";
            var l = new RegExp("&(?:" + r.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
                c = a(s);
            return function(t) {
              return String(t).replace(l, e);
            };
          }();
      e.exports = {
        XML: c,
        HTML: h,
        HTMLStrict: p
      };
    }, function(e, t, r) {
      function n(e) {
        if (e >= 55296 && 57343 >= e || e > 1114111)
          return "ÔøΩ";
        e in i && (e = i[e]);
        var t = "";
        return e > 65535 && (e -= 65536, t += String.fromCharCode(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += String.fromCharCode(e);
      }
      var i = r(22);
      e.exports = n;
    }, function(e, t, r) {
      function n(e) {
        return Object.keys(e).sort().reduce(function(t, r) {
          return t[e[r]] = "&" + r + ";", t;
        }, {});
      }
      function i(e) {
        var t = [],
            r = [];
        return Object.keys(e).forEach(function(e) {
          1 === e.length ? t.push("\\" + e) : r.push(e);
        }), r.unshift("[" + t.join("") + "]"), new RegExp(r.join("|"), "g");
      }
      function a(e) {
        return "&#x" + e.charCodeAt(0).toString(16).toUpperCase() + ";";
      }
      function s(e) {
        var t = e.charCodeAt(0),
            r = e.charCodeAt(1),
            n = 1024 * (t - 55296) + r - 56320 + 65536;
        return "&#x" + n.toString(16).toUpperCase() + ";";
      }
      function o(e, t) {
        function r(t) {
          return e[t];
        }
        return function(e) {
          return e.replace(t, r).replace(f, s).replace(d, a);
        };
      }
      function u(e) {
        return e.replace(m, a).replace(f, s).replace(d, a);
      }
      var l = n(r(6)),
          c = i(l);
      t.XML = o(l, c);
      var p = n(r(5)),
          h = i(p);
      t.HTML = o(p, h);
      var d = /[^\0-\x7F]/g,
          f = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
          m = i(l);
      t.escape = u;
    }, function(e, t) {
      e.exports = {
        0: 65533,
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
    }, function(e, t) {
      e.exports = {
        Aacute: "√Å",
        aacute: "√°",
        Acirc: "√Ç",
        acirc: "√¢",
        acute: "¬¥",
        AElig: "√Ü",
        aelig: "√¶",
        Agrave: "√Ä",
        agrave: "√†",
        amp: "&",
        AMP: "&",
        Aring: "√Ö",
        aring: "√•",
        Atilde: "√É",
        atilde: "√£",
        Auml: "√Ñ",
        auml: "√§",
        brvbar: "¬¶",
        Ccedil: "√á",
        ccedil: "√ß",
        cedil: "¬∏",
        cent: "¬¢",
        copy: "¬©",
        COPY: "¬©",
        curren: "¬§",
        deg: "¬∞",
        divide: "√∑",
        Eacute: "√â",
        eacute: "√©",
        Ecirc: "√ä",
        ecirc: "√™",
        Egrave: "√à",
        egrave: "√®",
        ETH: "√ê",
        eth: "√∞",
        Euml: "√ã",
        euml: "√´",
        frac12: "¬Ω",
        frac14: "¬º",
        frac34: "¬æ",
        gt: ">",
        GT: ">",
        Iacute: "√ç",
        iacute: "√≠",
        Icirc: "√é",
        icirc: "√Æ",
        iexcl: "¬°",
        Igrave: "√å",
        igrave: "√¨",
        iquest: "¬ø",
        Iuml: "√è",
        iuml: "√Ø",
        laquo: "¬´",
        lt: "<",
        LT: "<",
        macr: "¬Ø",
        micro: "¬µ",
        middot: "¬∑",
        nbsp: "¬†",
        not: "¬¨",
        Ntilde: "√ë",
        ntilde: "√±",
        Oacute: "√ì",
        oacute: "√≥",
        Ocirc: "√î",
        ocirc: "√¥",
        Ograve: "√í",
        ograve: "√≤",
        ordf: "¬™",
        ordm: "¬∫",
        Oslash: "√ò",
        oslash: "√∏",
        Otilde: "√ï",
        otilde: "√µ",
        Ouml: "√ñ",
        ouml: "√∂",
        para: "¬∂",
        plusmn: "¬±",
        pound: "¬£",
        quot: '"',
        QUOT: '"',
        raquo: "¬ª",
        reg: "¬Æ",
        REG: "¬Æ",
        sect: "¬ß",
        shy: "¬≠",
        sup1: "¬π",
        sup2: "¬≤",
        sup3: "¬≥",
        szlig: "√ü",
        THORN: "√û",
        thorn: "√æ",
        times: "√ó",
        Uacute: "√ö",
        uacute: "√∫",
        Ucirc: "√õ",
        ucirc: "√ª",
        Ugrave: "√ô",
        ugrave: "√π",
        uml: "¬®",
        Uuml: "√ú",
        uuml: "√º",
        Yacute: "√ù",
        yacute: "√Ω",
        yen: "¬•",
        yuml: "√ø"
      };
    }, function(e, t) {
      "use strict";
      function r(e) {
        var t,
            r,
            n = i[e];
        if (n)
          return n;
        for (n = i[e] = [], t = 0; 128 > t; t++)
          r = String.fromCharCode(t), n.push(r);
        for (t = 0; t < e.length; t++)
          r = e.charCodeAt(t), n[r] = "%" + ("0" + r.toString(16).toUpperCase()).slice(-2);
        return n;
      }
      function n(e, t) {
        var i;
        return "string" != typeof t && (t = n.defaultChars), i = r(t), e.replace(/(%[a-f0-9]{2})+/gi, function(e) {
          var t,
              r,
              n,
              a,
              s,
              o,
              u,
              l = "";
          for (t = 0, r = e.length; r > t; t += 3)
            n = parseInt(e.slice(t + 1, t + 3), 16), 128 > n ? l += i[n] : 192 === (224 & n) && r > t + 3 && (a = parseInt(e.slice(t + 4, t + 6), 16), 128 === (192 & a)) ? (u = n << 6 & 1984 | 63 & a, l += 128 > u ? "ÔøΩÔøΩ" : String.fromCharCode(u), t += 3) : 224 === (240 & n) && r > t + 6 && (a = parseInt(e.slice(t + 4, t + 6), 16), s = parseInt(e.slice(t + 7, t + 9), 16), 128 === (192 & a) && 128 === (192 & s)) ? (u = n << 12 & 61440 | a << 6 & 4032 | 63 & s, l += 2048 > u || u >= 55296 && 57343 >= u ? "ÔøΩÔøΩÔøΩ" : String.fromCharCode(u), t += 6) : 240 === (248 & n) && r > t + 9 && (a = parseInt(e.slice(t + 4, t + 6), 16), s = parseInt(e.slice(t + 7, t + 9), 16), o = parseInt(e.slice(t + 10, t + 12), 16), 128 === (192 & a) && 128 === (192 & s) && 128 === (192 & o)) ? (u = n << 18 & 1835008 | a << 12 & 258048 | s << 6 & 4032 | 63 & o, 65536 > u || u > 1114111 ? l += "ÔøΩÔøΩÔøΩÔøΩ" : (u -= 65536, l += String.fromCharCode(55296 + (u >> 10), 56320 + (1023 & u))), t += 9) : l += "ÔøΩ";
          return l;
        });
      }
      var i = {};
      n.defaultChars = ";/?:@&=+$,#", n.componentChars = "", e.exports = n;
    }, function(e, t) {
      "use strict";
      function r(e) {
        var t,
            r,
            n = i[e];
        if (n)
          return n;
        for (n = i[e] = [], t = 0; 128 > t; t++)
          r = String.fromCharCode(t), /^[0-9a-z]$/i.test(r) ? n.push(r) : n.push("%" + ("0" + t.toString(16).toUpperCase()).slice(-2));
        for (t = 0; t < e.length; t++)
          n[e.charCodeAt(t)] = e[t];
        return n;
      }
      function n(e, t, i) {
        var a,
            s,
            o,
            u,
            l,
            c = "";
        for ("string" != typeof t && (i = t, t = n.defaultChars), "undefined" == typeof i && (i = !0), l = r(t), a = 0, s = e.length; s > a; a++)
          if (o = e.charCodeAt(a), i && 37 === o && s > a + 2 && /^[0-9a-f]{2}$/i.test(e.slice(a + 1, a + 3)))
            c += e.slice(a, a + 3), a += 2;
          else if (128 > o)
            c += l[o];
          else if (o >= 55296 && 57343 >= o) {
            if (o >= 55296 && 56319 >= o && s > a + 1 && (u = e.charCodeAt(a + 1), u >= 56320 && 57343 >= u)) {
              c += encodeURIComponent(e[a] + e[a + 1]), a++;
              continue;
            }
            c += "%EF%BF%BD";
          } else
            c += encodeURIComponent(e[a]);
        return c;
      }
      var i = {};
      n.defaultChars = ";/?:@&=+$,-_.!~*'()#", n.componentChars = "-_.!~*'()", e.exports = n;
    }, function(e, t) {
      String.prototype.repeat || !function() {
        "use strict";
        var e = function() {
          try {
            var e = {},
                t = Object.defineProperty,
                r = t(e, e, e) && t;
          } catch (n) {}
          return r;
        }(),
            t = function(e) {
              if (null == this)
                throw TypeError();
              var t = String(this),
                  r = e ? Number(e) : 0;
              if (r != r && (r = 0), 0 > r || r == 1 / 0)
                throw RangeError();
              for (var n = ""; r; )
                r % 2 == 1 && (n += t), r > 1 && (t += t), r >>= 1;
              return n;
            };
        e ? e(String.prototype, "repeat", {
          value: t,
          configurable: !0,
          writable: !0
        }) : String.prototype.repeat = t;
      }();
    }, function(e, r) {
      e.exports = t;
    }]);
  });
})(require('process'));
